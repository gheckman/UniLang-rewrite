#!/usr/bin/env bash

function Transfer-Global(){
  Print-Whats-Happening "Global" "$1"
  Export-It-Good "$1";
  Copy-It "$1" "$2";
  Style-It "$1" "$2";
  #Document-It "$1";
  Remove-Generated-Code-From-Work-Area "$1";
}
function Transfer-Object-Good(){
   Print-Whats-Happening "Good Object" "$1"
   Export-It-Good "$1";
   Copy-It "$1" "$2";
   Style-It "$1" "$2";
   Test-It "$1" "$3";
   #Document-It "$1";
   Remove-Generated-Code-From-Work-Area "$1";
}
function Transfer-Object-Bad-Bools(){
   Print-Whats-Happening "Bad Object (BOOLS)" "$1"
   Export-It-Bad-Bools "$1";
   Copy-It "$1" "$2";
   Style-It "$1" "$2";
   Test-It "$1" "$3";
   #Document-It "$1";
   Remove-Generated-Code-From-Work-Area "$1";
 }
function Transfer-Object-Bad-Enums(){
   Print-Whats-Happening "Bad Object (ENUMS)" "$1"
   Export-It-Bad-Enums "$1";
   Copy-It "$1" "$2";
   Style-It "$1" "$2";
   Test-It "$1" "$3";
   #Document-It "$1";
   Remove-Generated-Code-From-Work-Area "$1";
}
function Transfer-Data(){
   Print-Whats-Happening "Data" "$1"
   Export-It-Good "$1";
   Copy-It "$1" "$2";
   Style-It "$1" "$2";
   #Test-It "$1" "$3";
   #Document-It "$1";
}
   




function Print-Whats-Happening(){

    CapsCaseName=`Caps_Case "$2"`
    
    #print the name of the component or utily nicely
    blue_message "$1"" - " $CapsCaseName;
    echo "";
}
function Export-It-Good(){
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="c" --style="good" "$1"."$UNILANG_FILE_EXTENSION";
}
function Export-It-Bad-Bools(){
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="c" --style="bad-bools" "$1"."$UNILANG_FILE_EXTENSION";
}
function Export-It-Bad-Enums(){
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="c" --style="bad-enums" "$1"."$UNILANG_FILE_EXTENSION";
}
function Document-It(){
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="plant-uml"  --style="normal"             "$1"."$UNILANG_FILE_EXTENSION";
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="dot"        --style="dependency-graph"   "$1"."$UNILANG_FILE_EXTENSION";
  $TRANSCOMPILER_TOOL --recursive_dependency_paths="$FULL_PATH_TO_UNICODE_ROOT" --exporter="f2si" --language="text"       --style="dependency-list"    "$1"."$UNILANG_FILE_EXTENSION";
  
  #turn dot file into image:
  dot -Tpng -o "$1".png "$1".dot
}


function Copy-It(){
  
  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #if it's a single header file
  count=`ls -1 $f2siName/*.c 2>/dev/null | wc -l`;
  if [ $count == 0 ]; then
  
    #Copy headers into the actual code base (don't transfer folder)
    cp -rf $f2siName/*.h "$FULL_PATH_TO_CODE_ROOT""$2" 
    
  #if it's multiple files
  else
  
    #Copy the directory into the actual code base
    cp -rf "$f2siName" "$FULL_PATH_TO_CODE_ROOT""$2"
    
  fi
  
}
function Style-It(){

  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #this is tied to headers that don't get created in the named folder (occurs when they are headers only)
  #if we transcompiler a UniLang file, and it only spits out a single .h, then that .h won't exist in a named folder.
  PossibleHeaderName="$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName".h
  
  #format the code once it's there.  
  #Things clang-format does, that we DON'T WANT TO HAPPEN:
  # - removes the empty newline at the end
  # - pushes macro values back to their identifier names (reversing any kind of alignment)
  #We just force format where we think the file is going to show up.  It might be a header file on its own,
  #it might actually be in a newly created directory
  
  #Tom said he doesn't like us auto-formatting, but I'd rather just do it, and have perfect code.  
  #The only way he would know I'm doing it anyway, is if there were no mistakes.
  #Mark is cool with it.
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  $CLANG_FORMAT_TOOL -style=file -i "$PossibleHeaderName" > /dev/null 2>&1;
  
  #agreed upon
  remove-top-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  remove-top-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  remove-top-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  remove-top-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  remove-top-empty-lines -i "$PossibleHeaderName" > /dev/null 2>&1;
  
  #agreed upon
  rtrim-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  rtrim-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  rtrim-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  rtrim-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  rtrim-lines -i "$PossibleHeaderName" > /dev/null 2>&1;
  
  #agreed upon
  whitespace-lines-to-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  whitespace-lines-to-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  whitespace-lines-to-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  whitespace-lines-to-empty-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  whitespace-lines-to-empty-lines -i "$PossibleHeaderName" > /dev/null 2>&1;
  
  #agreed upon
  squeeze-whitespace-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  squeeze-whitespace-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  squeeze-whitespace-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  squeeze-whitespace-lines -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  squeeze-whitespace-lines -i "$PossibleHeaderName" > /dev/null 2>&1;
  
  #per Dr. Joe
  macro-value-aligner -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  macro-value-aligner -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  macro-value-aligner -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  macro-value-aligner -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  
  #Add the empty newline back to the files after formatting (removed by clang format)
  #Windriver compiler and Tom complain about this
  set-a-single-blank-line-to-the-end-of-file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.h > /dev/null 2>&1;
  set-a-single-blank-line-to-the-end-of-file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.c > /dev/null 2>&1;
  set-a-single-blank-line-to-the-end-of-file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.hpp > /dev/null 2>&1;
  set-a-single-blank-line-to-the-end-of-file -i "$FULL_PATH_TO_CODE_ROOT""$2"/"$f2siName"/*.cpp > /dev/null 2>&1;
  set-a-single-blank-line-to-the-end-of-file -i "$PossibleHeaderName" > /dev/null 2>&1;
  

  
}
function Test-It(){
  
  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  mkdir -p "$FULL_PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src";
  cp -rf "$f2siName""Wrapper" "$FULL_PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"/"$f2siName""Wrapper"/*.hpp
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"/"$f2siName""Wrapper"/*.cpp
}

function Remove-Generated-Code-From-Work-Area(){

  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #removes exported folder
  rm -rf "$f2siName";
  
  #removes wrapper if it exists
  rm -rf "$f2siName""Wrapper";
}




function Clang-Format-Some-Other-Files(){
echo "formatting other files...";
  #$CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""Shared/ffs/FfsCommon.h"
  #$CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""Shared/ffs/FfsCommon.c"
  #$CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""Shared/ffs/FfsTypes.h"
  #$CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""SystemManagers/Electrical"/*.h
  #$CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""SystemManagers/Electrical"/*.c
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""Connections/UDP/J2Communication/J2Messages"/*.h
  $CLANG_FORMAT_TOOL -style=file -i "$FULL_PATH_TO_CODE_ROOT""Connections/UDP/J2Communication/J2Messages"/*.c
}

function Single-Newline-At-The-End-Of-Every-File(){
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension h
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension c
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension cpp
}
function Remove-Whitespace-Lines-At-The-Top-Of-Every-File(){
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension h
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension c
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension cpp
}
function Check-For-Duplicate-Headers(){
  recursively-detect-redundant-header-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension h
  recursively-detect-redundant-header-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-detect-redundant-header-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension c
  recursively-detect-redundant-header-files --start-path "$FULL_PATH_TO_CODE_ROOT" --file-extension cpp 
}
function Cpp-Check-All-Files(){
  find "$FULL_PATH_TO_CODE_ROOT" -type f|while read f; do cppchecker "'""$f""'" --search-paths "$FULL_FULL_PATH_TO_CODE_ROOT" '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}
function Splint-Check-All-Files(){
  find "$FULL_PATH_TO_CODE_ROOT" -type f|while read f; do splint-checker "'""$f""'" --search-paths "$FULL_FULL_PATH_TO_CODE_ROOT" '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}
function Hungarian-Notation-Check-All-Files(){
  find "$FULL_PATH_TO_CODE_ROOT" -type f|while read f; do f2si-hungarian-notation-validator "'""$f""'" --search-paths "$FULL_FULL_PATH_TO_CODE_ROOT" '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}

