􏶞global􏶟
􏷲J2 System Connection􏷱
􏷰Sends and receives J2 flight model messages􏷯
􏷮J2_Connection􏷭
􏷬Trevor Hickey􏷫

􏷤Defs􏷣􏷢USES: BYTE, WORD, DWORD􏷡
􏷤strLib􏷣􏷢USES: memcpy()􏷡
􏷤stdioLib􏷣􏷢USES: perror()􏷡
􏷤SocketManager􏷣􏷢USES: SocketSend(), SocketReceive(), DATA_BUFFER_SIZE􏷡
􏷤SocketList􏷣􏷢USES: SOCKET_GEN_J2_SEND, SOCKET_GEN_J2_RECEIVE􏷡
􏷤TimeUtilities􏷣􏷢USES: DelayTaskNumberOfMilliseconds()􏷡
􏷤OwnShip􏷣􏷢USES: WriteJ2Data()􏷡
􏷤J2CommunicationConfig􏷣􏷢USES: J2_TASKDELAY_MS􏷡

􏷘+􏷗􏷒J2 receive􏷑
􏷐Used to sequence incoming J2 Messages.􏷏
􏶠This is an infinitely running task.􏶡
􏶾int􏶽􏶼status􏶻􏶺The return status of the task.  Not relevant as the task does not return.􏶹
􏶴
    BYTE pucDataBuffer[DATA_BUFFER_SIZE];
    int nBytesReceived = 0, nByteIndex = 0, nAlignSize = 0;
    int nReturnStatus = 0;
    BYTE *pucByteAlign = NULL;
    J2InConnectionDataT tJ2Data;

    memset(&tJ2Data, 0, sizeof(tJ2Data));

    while(1)
    {

        􏶲Read from Ownship in case we are only changing part of J2InConnectionDataT􏶱
        ReadJ2Data(&tJ2Data);
        
        􏶲Read UDP data􏶱
        nBytesReceived = SocketReceive(SOCKET_GEN_J2_RECEIVE, (char *)pucDataBuffer, sizeof(pucDataBuffer));

        􏶲report errors when receiving UDP data has failed􏶱
        if(nBytesReceived == ERROR){
            
            􏶲we want to return error for Watchdog task􏶱
            perror("ProcessSocketMessage error");
            nReturnStatus = 1;
            􏶲TODO: send error to Watchdog here􏶱
            
        }
        else{
            􏶲TODO: send timestamp to watchdog task􏶱
            􏶲timestamp,  nBytesReceived, ... ?􏶱
        }

        􏶲process message and parse data received into the input communication data here􏶱
        􏶲...􏶱

        􏶲Write data back into Ownship􏶱
        WriteJ2Data(&tJ2Data);
    }

    return nReturnStatus;
􏶳

􏷘+􏷗􏷒J2 send􏷑
􏷐Used to sequence outgoing J2 Messages.􏷏
􏶠This is an infinitely running task.􏶡
􏶾int􏶽􏶼status􏶻􏶺The return status of the task.  Not relevant as the task does not return.􏶹
􏶴
    int nByteCount = 0;
    int nReturnStatus = 0;
    BYTE pucDataBuffer[DATA_BUFFER_SIZE];

    DelayTaskNumberOfMilliseconds(1000);
    memset(pucDataBuffer, 0, DATA_BUFFER_SIZE);

    while(1)
    {
        // fill data buffer

        nByteCount = 􏵲fill buffer􏵳pucDataBuffer, sizeof(pucDataBuffer));

        // if either of these returns is non-zero, flag the error
        if(nByteCount == 0)
        {
            perror("J2 tx buffer failure");
            // TODO: report error to Watchdog
        }
        else if(SocketSend(SOCKET_GEN_J2_SEND, (char *)pucDataBuffer, nByteCount) == ERROR)
        {
            perror("J2 transmit failure");
            // TODO: report error to Watchdog
        }

        // Delay
        DelayTaskNumberOfMilliseconds(J2_TASKDELAY_MS);
    }

    return nReturnStatus;
􏶳

􏷘-􏷗􏷒fill buffer􏷑
􏷐Used to fill buffer for sending outgoing J2 messages.􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜􏶝􏷆BYTE *const􏷅􏷄data buffer􏷃􏷀The data buffer to fill with the outgoing J2 message.􏶿
􏶜c􏶝􏷆int􏷅􏷄data buffer size􏷃􏷀The size of the data buffer􏶿
􏶾int􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    int nByteCount = 0;

    􏶲TODO: fill buffer for send here􏶱
    *(int *)􏵶data buffer􏵷 = 0;
    nByteCount += sizeof(int);

    return nByteCount;
􏶳
