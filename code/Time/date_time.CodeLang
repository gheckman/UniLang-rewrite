􏶞object􏶟
􏷲An adjustable date and a time with millisecond precision􏷱
􏷰
A replacement over time_t and struct tm from the standard C library.
Due to the size and precision limitations of time_t and struct tm,
DateTime provides a similar interface to struct tm, but can be updated with millisecond precision.  
It contains both the date month/day/year, and the time of day in milliseconds.
The reason this type was added was to account for the size limitations on 32-bit machine of tm.  
We would not be able to exceed the year 2038 without rolling out our own DateTime object.  
The datetime changes through a millisecond delta, and it handles the overflow of days and months.  
It accounts for leap years, but does not account for daylight savings time or leap seconds.
The year limit of datetime is now the max size of an unsigned int.
􏷯
􏷮Time􏷭 􏷮Date􏷭 􏷮Component􏷭
􏷬Trevor Hickey􏷫
􏷦Month􏷥􏷢USES: MonthE􏷡
􏷤DateUtilities􏷣􏷢USES: IsLeapYear()􏷡


􏷘+􏷗􏷒􏶐􏷑
􏷐Set Time􏷏
􏶠
Set the 􏶐 to a particular date and time.
Once a 􏶐 is initalized, it can only progress forward.  
Reseting the time to a different value will require a re-initalize.
􏶡
􏶜c􏶝􏷆MonthE􏷅􏷄month􏷃􏷀The month to start the date at􏶿
􏶜c􏶝􏷆unsigned int􏷅􏷄day􏷃􏷀the number of days in a month to start the current date time at􏶿
􏶜c􏶝􏷆unsigned int􏷅􏷄year􏷃􏷀the year to set the date at􏶿
􏶜c􏶝􏷆unsigned int􏷅􏷄milliseconds􏷃􏷀the number of milliseconds in a day to start the current date time at􏶿
􏶴
􏶲we assume the input parameters are valid􏶱
􏵴day􏵵 = 􏵶day􏵷;
􏵴month􏵵 = 􏵶month􏵷;
􏵴year􏵵 = 􏵶year􏵷;
􏵴milliseconds􏵵 = 􏵶milliseconds􏵷;
􏶳


􏷘+􏷗􏷒increase by number of milliseconds􏷑
􏷐Increment the 􏶐 by a number of milliseconds.􏷏
􏶠Moving forward a number of milliseconds will properly adjust all of the other values.􏶡
􏶜c􏶝􏷆unsigned int􏷅􏷄number of milliseconds􏷃􏷀the number of milliseconds to increase the current date time by􏶿
􏶴
􏶲increase the number of milliseconds.
we assume this happens frequently enough that we don't have
more than a day delay between millisecond updates.􏶱
􏵴milliseconds􏵵 += 􏵶number of milliseconds􏵷;

􏶲handles milliseconds overflow
wraps value for milliseconds and increments day during millisecond overflow􏶱
if(􏵴milliseconds􏵵 >= NUMBER_OF_MILLISECONDS_IN_A_DAY)
{
    􏵴milliseconds􏵵 %= NUMBER_OF_MILLISECONDS_IN_A_DAY;
    ++􏵴day􏵵;
}

􏶲handles day overflow
resets value for day and increases the month by 1 during day overflow􏶱
if(􏵴day􏵵 > NumberOfDaysInTheMonth(􏵴month􏵵,􏵴year􏵵))
{
    􏵴day􏵵 = 1;
    ++􏵴month􏵵;
}

􏶲handles month overflow
resets value for month and increases the year by 1 during month overflow􏶱
if(􏵴month􏵵 > NUMBER_OF_MONTHS_IN_A_YEAR)
{
    􏵴month􏵵 = 1;
    ++􏵴year􏵵;
}

􏶲max value of year is max the value of an unsigned int
large enough for our use cases.􏶱
􏶳


􏶨the number of milliseconds of the current day􏶧
􏶦expect the value to be in a valid range of (0 - 86,399,999)􏶥
􏶌observe􏶑􏶘-􏶙􏶮unsigned int􏶭􏶬milliseconds􏶫􏶪0􏶩

􏶨the current calendar day of the month􏶧
􏶦expect the value to be in a valid range of (1 - 31)􏶥
􏶌observe􏶑􏶘-􏶙􏶮unsigned int􏶭􏶬day􏶫􏶪0􏶩

􏶨the current month of the year􏶧
􏶦expect the value to be in a valid range of (1 - 12)􏶥
􏶌observe􏶑􏶘-􏶙􏶮MonthE􏶭􏶬month􏶫􏶪0􏶩

􏶨the current year􏶧
􏶦expect the value to be any positive number that fits the size of an unsigned int􏶥
􏶌observe􏶑􏶘-􏶙􏶮unsigned int􏶭􏶬year􏶫􏶪0􏶩
