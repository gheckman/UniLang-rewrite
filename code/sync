#!/usr/bin/env bash

#nonmutatable globals
ACTUAL_REPO="/home/malko/Desktop/work-related/fresh"
CODE_ROOT="SimHost/UH72A VME/Src"
TEST_ROOT="SimHost/Tests/Unit_Tests"

PATH_TO_CODE_ROOT="$ACTUAL_REPO""/""$CODE_ROOT""/"
PATH_TO_TEST_ROOT="$ACTUAL_REPO""/""$TEST_ROOT""/"

function Transfer-Global(){
  Print-Whats-Happening "Global" "$1"
  Export-It-Good "$1";
  Copy-It "$1" "$2";
  Style-It "$1" "$2";
  Remove-Generated-Code-From-Work-Area "$1";
}
function Transfer-Object-Good(){
  Print-Whats-Happening "Object" "$1" 
  Export-It-Good "$1";
  Copy-It "$1" "$2";
  Style-It "$1" "$2";
  Test-It "$1" "$3";
  Remove-Generated-Code-From-Work-Area "$1";
}
function Transfer-Object-Bad(){
  Print-Whats-Happening "Object" "$1" 
  Export-It-Bad "$1";
  Copy-It "$1" "$2";
  Style-It "$1" "$2";
  Test-It "$1" "$3";
  Remove-Generated-Code-From-Work-Area "$1";
}


function Print-Whats-Happening(){
    
    #print the name of the component or utily nicely
    echo -n "$1"" - ";
    Caps_Case "$2";
}
function Export-It-Good(){

  #export CodeLang stuff
  #currently:
  # - f2si export C code (in directory)
  # - unit test wrapper for f2si components (in directory) 
  CodeLang-compiler --exporter="f2si" --language="c" --style="good" "$1".CodeLang;
}
function Export-It-Bad(){

  #export CodeLang stuff
  #currently:
  # - f2si export C code (in directory)
  # - unit test wrapper for f2si components (in directory) 
  CodeLang-compiler --exporter="f2si" --language="c" --style="bad" "$1".CodeLang;
}


function Copy-It(){
  
  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #if it's a single header file
  count=`ls -1 $f2siName/*.c 2>/dev/null | wc -l`;
  if [ $count == 0 ]; then
  
    #Copy headers into the actual code base (don't transfer folder)
    cp -rf $f2siName/*.h "$PATH_TO_CODE_ROOT""$2" 
    #echo hi
    
  #if it's multiple files
  else
  
    #Copy the directory into the actual code base
    cp -rf "$f2siName" "$PATH_TO_CODE_ROOT""$2"
    
  fi
  
}
function Style-It(){

  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #format the code once it's there
  clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""$2"/"$f2siName"/* > /dev/null 2>&1;
  clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""$2"/*.h > /dev/null 2>&1;
}
function Test-It(){
  
  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  cp -rf "$f2siName""Wrapper" "$PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"
  clang-format-3.6 -style=file -i "$PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"/"$f2siName""Wrapper"/*.hpp
  clang-format-3.6 -style=file -i "$PATH_TO_TEST_ROOT""$2"/"$f2siName"/"Linux/Src"/"$f2siName""Wrapper"/*.cpp
}

function Remove-Generated-Code-From-Work-Area(){
  #folder name it was exported to
  f2siName=`Pushed_Caps_Case $1`;
  
  #removes exported folder
  rm -rf "$f2siName";
  
  #removes wrapper if it exists
  rm -rf "$f2siName""Wrapper";
  
  
}



function Pushed_Caps_Case(){
      echo "$1" | tr _ " " | tr [A-Z] [a-z] | sed "s/\( \|^\)\(.\)/\1\u\2/g" | tr -d " "
}

#For printing nicely
function Caps_Case(){
  echo "$1" | tr _ " " | tr [A-Z] [a-z] | sed -r 's/\<./\U&/g';
}

function Clang-Format-Some-Other-Files(){
echo "formatting other files...";
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""Shared/ffs/FfsCommon.h"
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""Shared/ffs/FfsCommon.c"
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""Shared/ffs/FfsTypes.h"
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""SystemManagers/Electrical"/*.h
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""SystemManagers/Electrical"/*.c
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""Connections/UDP/J2Communication"/*.h
  #clang-format-3.6 -style=file -i "$PATH_TO_CODE_ROOT""Connections/UDP/J2Communication"/*.c
}

function Single-Newline-At-The-End-Of-Every-File(){
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension h
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension c
  recursively-set-a-single-blank-line-to-the-end-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension cpp
}
function Remove-Whitespace-Lines-At-The-Top-Of-Every-File(){
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension h
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension c
  recursively-remove-first-whitespace-lines-from-front-of-files --start-path "$PATH_TO_CODE_ROOT" --file-extension cpp
}
function Check-For-Duplicate-Headers(){
  recursively-detect-redundant-header-files --start-path "$PATH_TO_CODE_ROOT" --file-extension h
  recursively-detect-redundant-header-files --start-path "$PATH_TO_CODE_ROOT" --file-extension hpp
  recursively-detect-redundant-header-files --start-path "$PATH_TO_CODE_ROOT" --file-extension c
  recursively-detect-redundant-header-files --start-path "$PATH_TO_CODE_ROOT" --file-extension cpp 
}
function Cpp-Check-All-Files(){
  find "$PATH_TO_CODE_ROOT" -type f|while read f; do cppchecker "'""$f""'" --search-paths '/home/malko/Desktop/work-related/fresh/SimHost/UH72A VME/Src' '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}
function Splint-Check-All-Files(){
  find "$PATH_TO_CODE_ROOT" -type f|while read f; do splint-checker "'""$f""'" --search-paths '/home/malko/Desktop/work-related/fresh/SimHost/UH72A VME/Src' '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}
function Hungarian-Notation-Check-All-Files(){
  find "$PATH_TO_CODE_ROOT" -type f|while read f; do f2si-hungarian-notation-validator "'""$f""'" --search-paths '/home/malko/Desktop/work-related/fresh/SimHost/UH72A VME/Src' '/home/malko/Desktop/work-related/fresh/SimHost/Tests/Test_Dependencies/For_Linux/VxWorks_Wrappers'; done
}


function Codelang-Transform(){
  #name of CodeLang file / where to place in repo / where to place class wrapper

  #Utilities
  cd Utilities;
  #Transfer-Global "time_utilities" "Shared/ffs"
  #Transfer-Global "date_utilities" "Shared/ffs"
  cd ..;

  #Time related
  cd Time;
  #Transfer-Global "month" "Components/Time"
  #Transfer-Object-Bad "date_time" "Components/Time" "Components/Time"
  #Transfer-Object-Bad "millisecond_timer" "Components/Time" "Components/Time"
  #Transfer-Object-Bad "simulation_clock" "Components/Time" "Components/Time"
  cd ..;

  #Electrical Generic related
  cd Electrical/generic;
  #Transfer-Object-Bad "junction" "Components/Electrical/Generic" "Components/Electrical/Generic"
  #Transfer-Object-Bad "node" "Components/Electrical/Generic" "Components/Electrical/Generic"
  #Transfer-Global "node_type" "Components/Electrical/Generic"
  #Transfer-Object-Bad "electrical_graph" "Components/Electrical/Generic" "Components/Electrical/Generic"
  #Transfer-Object-Bad "path" "Components/Electrical/Generic" "Components/Electrical/Generic"
  #Transfer-Object-Bad "paths" "Components/Electrical/Generic" "Components/Electrical/Generic"
  cd ../../;

  #Electrical Specific related
  cd Electrical/specific;
  #Transfer-Object-Bad "after_junction_box" "Components/Electrical/Specific" "Components/Electrical/Specific"
  #Transfer-Object-Bad "battery_box" "Components/Electrical/Specific" "Components/Electrical/Specific"
  #Transfer-Object-Bad "diode_box" "Components/Electrical/Specific" "Components/Electrical/Specific"
  #Transfer-Object-Bad "distribution_box" "Components/Electrical/Specific" "Components/Electrical/Specific"
  #Transfer-Object-Bad "overhead_panel" "Components/Electrical/Specific" "Components/Electrical/Specific"
  #Transfer-Global "electrical_system_side" "Components/Electrical/Specific"
  #Transfer-Object-Bad "D_C_power_system" "Components/Electrical/Specific" "Components/Electrical/Specific"
  cd ../../;

  #Electrical Manager related
  cd Electrical/manager;
  #Transfer-Global "electrical_input_setter" "SystemManagers/Electrical"
  #Transfer-Global "electrical_malfunction_applier" "SystemManagers/Electrical"
  #Transfer-Global "electrical_updater" "SystemManagers/Electrical"
  cd ../../;
  
  #Electrical components
  cd Electrical/components;
  Transfer-Object-Bad "battery" "Components/Electrical" "Components/Electrical"
  Transfer-Global "battery_chemistry" "Components/Electrical/Battery" "Components/Electrical/Battery"
  cd ../../;
  

  #Other stuff
  cd Other;
  #Transfer-Global "ffs_const" "Shared/ffs"
  cd ..;
  
  #Connection stuff
  cd Connections/J2;
  #Transfer-Global "j2_communication" "Connections/UDP/";
  #Transfer-Global "j2_message_types" "Connections/UDP/J2Communication/";
  cd ../../;
  
  cd Components;
  #Transfer-Object-Bad "tri_state_switch" "Components/Generic/Controls" "Components/Generic/Controls";
  #Transfer-Global "tri_state" "Components/Generic/Controls/TriStateSwitch";
  cd ..;
}


#--------------------#
# CodeLang -> F2si C #
#--------------------#
Codelang-Transform;


#------------------#
# Global Scanners: #
#------------------#
#Check-For-Duplicate-Headers;
#Cpp-Check-All-Files;
#Splint-Check-All-Files;
#Hungarian-Notation-Check-All-Files;

#---------------------------#
# Selected Transformations: #
#---------------------------#
Clang-Format-Some-Other-Files;

#-------------------------#
# Global Transformations: #
#-------------------------#
#Remove-Whitespace-Lines-At-The-Top-Of-Every-File;
#Single-Newline-At-The-End-Of-Every-File;

