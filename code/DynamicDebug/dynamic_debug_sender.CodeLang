􏶞global􏶟
􏷲A generic C structure representing a dynamic debug message.􏷱
􏷰A dynamic debug message can be created with different constructor functions.  
Due to the message representing variant type data internally,
it is recomended you create the message using one of its constructor functions.􏷯
􏷮Debug􏷭 􏷮Communication􏷭
􏷬Trevor Hickey􏷫
􏷦stdioLib􏷥􏷢HASA: BOOL􏷡
􏷦DynamicDebugMessageData􏷥􏷢USES: DynamicDebugMessageT􏷡
􏷤DynamicDebugConfiguration􏷣􏷢USES: MAX_LENGTH_OF_DEBUG_PATH_VALUE, MAX_LENGTH_OF_DEBUG_STRING_VALUE, DYNAMIC_DEBUG_VERSION_NUMBER􏷡
􏷤DynamicDebugType􏷣􏷢USES: DynamicDebugTypeE􏷡
􏷤string􏷣􏷢USES: strcpy()􏷡

􏷘+􏷗􏷒send message to the dynamic debugger􏷑
􏷐Sends a generic debug message to the dynamic debugger.􏷏
􏶠This method will handle sending debugging messages of any value type(int,real,bool,string)􏶡
􏶜c􏶝􏷆DynamicDebugMessageT􏷅􏷄dynamic debug message􏷃􏷀The value to send over the network to the dynamic debugger.􏶿
􏶴
    􏶲TODO: possibly add something stateful that will queue the sending of packets (avoid UDP flooding). 
    possibly add something stateful that will keep a table for lookups and to change debug values on response messages.􏶱
    
    􏶲For now:􏶱
    􏶲Take the generic debug message, and dispatch on its type to pack-up and send the packet over the network.􏶱
    switch (􏵶dynamic debug message􏵷.m_eDataType){
        case MESSAGE_DATA_TYPE_INT:    􏵲send int udp packet􏵳􏵶dynamic debug message􏵷.m_nIntValue,􏵶dynamic debug message􏵷.m_szPathName,DYNAMIC_DEBUG_VERSION_NUMBER);         break;
        case MESSAGE_DATA_TYPE_REAL:   􏵲send real udp packet􏵳􏵶dynamic debug message􏵷.m_dRealValue,􏵶dynamic debug message􏵷.m_szPathName,DYNAMIC_DEBUG_VERSION_NUMBER);       break;
        case MESSAGE_DATA_TYPE_BOOL:   􏵲send bool udp packet􏵳􏵶dynamic debug message􏵷.m_bBoolValue,􏵶dynamic debug message􏵷.m_szPathName,DYNAMIC_DEBUG_VERSION_NUMBER);       break;
        case MESSAGE_DATA_TYPE_STRING: 􏵲send string udp packet􏵳􏵶dynamic debug message􏵷.m_pucStringValue,􏵶dynamic debug message􏵷.m_szPathName,DYNAMIC_DEBUG_VERSION_NUMBER); break;
    }
􏶳

􏷘-􏷗􏷒send int udp packet􏷑
􏷐Uses parameters to send a debug udp packet to the dynamic debugger.􏷏
􏶠􏶡
􏶜c􏶝􏷆int􏷅􏷄debug value􏷃􏷀The value to send as the payload of the UDP message.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶜c􏶝􏷆BYTE􏷅􏷄version􏷃􏷀The version number of the dynamic debug send protocol.􏶿
􏶴
/* TODO */
􏶲turn parameters into UDP packet, and send.􏶱
􏶲 - header?􏶱
􏶲 - UDP message structure:􏶱
􏶲 - Debug Type (byte)􏶱
􏶲 - Version (byte)􏶱
􏶲 - IValue Type (byte)􏶱
􏶲 - Message Size (uint16)􏶱
􏶲 - Data Payload (based on IValue)􏶱
􏶲 - Name (Null Terminated)􏶱
􏶳

􏷘-􏷗􏷒send real udp packet􏷑
􏷐Uses parameters to send a debug udp packet to the dynamic debugger.􏷏
􏶠􏶡
􏶜c􏶝􏷆double􏷅􏷄debug value􏷃􏷀The value to send as the payload of the UDP message.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶜c􏶝􏷆BYTE􏷅􏷄version􏷃􏷀The version number of the dynamic debug send protocol.􏶿
􏶴
/* TODO */
􏶲turn parameters into UDP packet, and send.􏶱
􏶲 - header?􏶱
􏶲 - UDP message structure:􏶱
􏶲 - Debug Type (byte)􏶱
􏶲 - Version (byte)􏶱
􏶲 - IValue Type (byte)􏶱
􏶲 - Message Size (uint16)􏶱
􏶲 - Data Payload (based on IValue)􏶱
􏶲 - Name (Null Terminated)􏶱
􏶳

􏷘-􏷗􏷒send bool udp packet􏷑
􏷐Uses parameters to send a debug udp packet to the dynamic debugger.􏷏
􏶠􏶡
􏶜c􏶝􏷆bool􏷅􏷄debug value􏷃􏷀The value to send as the payload of the UDP message.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶜c􏶝􏷆BYTE􏷅􏷄version􏷃􏷀The version number of the dynamic debug send protocol.􏶿
􏶴
/* TODO */
􏶲turn parameters into UDP packet, and send.􏶱
􏶲 - header?􏶱
􏶲 - UDP message structure:􏶱
􏶲 - Debug Type (byte)􏶱
􏶲 - Version (byte)􏶱
􏶲 - IValue Type (byte)􏶱
􏶲 - Message Size (uint16)􏶱
􏶲 - Data Payload (based on IValue)􏶱
􏶲 - Name (Null Terminated)􏶱
􏶳

􏷘-􏷗􏷒send string udp packet􏷑
􏷐Uses parameters to send a debug udp packet to the dynamic debugger.􏷏
􏶠􏶡
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_STRING_VALUE]􏷅􏷄debug value􏷃􏷀The value to send as the payload of the UDP message.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶜c􏶝􏷆BYTE􏷅􏷄version􏷃􏷀The version number of the dynamic debug send protocol.􏶿
􏶴
/* TODO */
􏶲turn parameters into UDP packet, and send.􏶱
􏶲 - header?􏶱
􏶲 - UDP message structure:􏶱
􏶲 - Debug Type (byte)􏶱
􏶲 - Version (byte)􏶱
􏶲 - IValue Type (byte)􏶱
􏶲 - Message Size (uint16)􏶱
􏶲 - Data Payload (based on IValue)􏶱
􏶲 - Name (Null Terminated)􏶱
􏶳