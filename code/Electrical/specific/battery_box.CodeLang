􏶞object􏶟
􏷲A 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 node IDs and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Circuit_Box􏷭
􏷬Trevor Hickey􏷫

􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷦ElectricalGraph􏷥􏷢USES: ElectricalGraphOutputsT􏷡
􏷤string􏷣􏷢USES: strcpy()􏷡

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  􏶲create all the internal nodes inside the graph data structure􏶱
  CreateNodes(ptOutputs,􏵶graph􏵷);
  
  􏶲connect these newly created nodes􏶱
  CreateWires(ptOutputs,􏵶graph􏵷);
  
  􏶲apply any nodes to ground that should be􏶱
  ApplyNodesToGround(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  􏶲create all of the vertexes that are part of the 􏶐
  the essential bus is technically outside the 􏶐,
  but we include it here for conceptual organization􏶱
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddNode = 􏵱;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery");
  tInputs.m_eType = NODE_TYPE_BATTERY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴battery􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery hot bus");
  tInputs.m_eType = NODE_TYPE_BUS;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴hot bus􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery relay");
  tInputs.m_eType = NODE_TYPE_RELAY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵰;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴relay􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery bus");
  tInputs.m_eType = NODE_TYPE_BUS;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴bus􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery bus fuse 1");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 1􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery bus fuse 2");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 2􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "battery bus fuse 3");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 3􏵵 = 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "external power relay");
  tInputs.m_eType = NODE_TYPE_RELAY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵰;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴external power relay􏵵= 􏵶graph􏵷->m_uId;
  
  􏶲add node to graph􏶱
  strcpy(tInputs.m_szName, "external power unit");
  tInputs.m_eType = NODE_TYPE_EPU;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴external power unit􏵵 = 􏵶graph􏵷->m_uId;
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  􏶲connect the related components􏶱
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddWire = 􏵱;
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴battery􏵵;
  tInputs.m_uNodeY = 􏵴hot bus􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴hot bus􏵵;
  tInputs.m_uNodeY = 􏵴relay􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴relay􏵵;
  tInputs.m_uNodeY = 􏵴bus􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴bus􏵵;
  tInputs.m_uNodeY = 􏵴external power relay􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴external power relay􏵵;
  tInputs.m_uNodeY = 􏵴external power unit􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 1􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 2􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect two nodes together􏶱
  tInputs.m_uNodeX = 􏵴bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 3􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳

􏷘-􏷗􏷒apply nodes to ground􏷑
􏷐Attach particular 􏶐 nodes to common ground.􏷏
􏶠The nodes being connected to ground will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will use to connect its existing nodes to common ground.􏶿
􏶴
  􏶲apply any nodes to ground that should be􏶱
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bConnectNodeToCommonGround = 􏵱;
  
  􏶲connect node to common ground􏶱
  tInputs.m_uNode = 􏵴battery􏵵;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect node to common ground􏶱
  tInputs.m_uNode = 􏵴hot bus􏵵;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  􏶲connect node to common ground􏶱
  tInputs.m_uNode = 􏵴bus􏵵;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬battery􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬hot bus􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬bus􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 1􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 2􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 3􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬external power relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and recieve back the actual node object.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬external power unit􏶫􏶪0􏶩

