􏶞object􏶟
􏷲A 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 node IDs and builds them into the generic electrical graph.
These are derived from the Wiring Diagram Manual (WDM) MBB BK117 C-2.􏷯
􏷮Electrical_System􏷭 􏷮Circuit_Box􏷭
􏷬Trevor Hickey􏷫

􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷦ElectricalGraph􏷥􏷢USES: ElectricalGraphOutputsT􏷡
􏷦AircraftGeneralConst􏷥􏷢USES: ElectricalSystemSideE􏷡
􏷤string􏷣􏷢USES: strcpy()􏷡

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  //create the buses on the 􏶏
  CreateBusses(ptOutputs,􏵶graph􏵷);
  
  //create all the internal nodes inside the graph data structure
  CreateDevices(ptOutputs,􏵶graph􏵷);
  
  //connect these newly created nodes
  ConnectDevices(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create busses􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the created nodes a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  CreateBusAndApplyToGround(ptOutputs,&􏵴essential bus􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ESS BUS",0,􏵱,􏵶graph􏵷);
  CreateBusAndApplyToGround(ptOutputs,&􏵴essential bus􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ESS BUS",0,􏵱,􏵶graph􏵷);
  CreateBusAndApplyToGround(ptOutputs,&􏵴shed bus􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ESS BUS",0,􏵱,􏵶graph􏵷);
  CreateBusAndApplyToGround(ptOutputs,&􏵴shed bus􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ESS BUS",0,􏵱,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create devices􏷑
􏷐Constructs all of the electrical devices into the generic electrical graph data structure.􏷏
􏶠This will give all of the created nodes a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  //if you tilt the "Wiring Diagram Manual (WDM) MBB BK117 C-2" on its side, you will have the 􏶏
  //portion of the schematic on top of he other DC boxes.  From this position, you will will be able to differentiate
  //the left from the right portion of the 􏶏.
  
  //creates all of the left and right portions of the 􏶏
  //*buses do not need created here(they are created elesewhere).
  CreateLeftPanelDevices(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevices(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create left panel devices􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏,
and puts them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created nodes a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel nodes into.􏶿
􏶴
  //construct all the devices that are a part of 
  //the left portion of the 􏶏.
  CreateLeftPanelDevicesForRow1(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow2(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow3(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow4(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow5(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow6(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow7(ptOutputs,􏵶graph􏵷);
  CreateLeftPanelDevicesForRow8(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create right panel devices􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏,
and puts them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
  //construct all the devices that are a part of 
  //the right portion of the 􏶏.
  CreateRightPanelDevicesForRow1(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow2(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow3(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow4(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow5(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow6(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow7(ptOutputs,􏵶graph􏵷);
  CreateRightPanelDevicesForRow8(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create device and apply to ground􏷑
􏷐Adds a specified device node to the graph, and connects it to ground.􏷏
􏶠Used to construct a device node into the graph, and then set that node to common ground.􏶡
􏶜􏶝􏷆size_t*const􏷅􏷄node id􏷃􏷀the id to be set when creating the device􏶿
􏶜c􏶝􏷆char[MAX_NUMBER_OF_CHARACTERS_IN_NODE_NAME]􏷅􏷄name􏷃􏷀the name of the device being added􏶿
􏶜c􏶝􏷆float􏷅􏷄resistance􏷃􏷀the resistence of the device being added􏶿
􏶜c􏶝􏷆BOOL􏷅􏷄has flow􏷃􏷀whether or not the device allows electricity to flow through it.􏶿
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct devices into.􏶿
􏶴
  //create node for part of the 􏶐
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddNode = 􏵱;
  
  //add node to graph
  strcpy(tInputs.m_szName, 􏵶name􏵷);
  tInputs.m_eType = NODE_TYPE_DEVICE;
  tInputs.m_fResistance = 􏵶resistance􏵷;
  tInputs.m_bHasFlow = 􏵶has flow􏵷;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  *􏵶node id􏵷 = 􏵶graph􏵷->m_uId;
  
  //add device to the ground.
  tInputs.m_bAddNode = 􏵰;
  tInputs.m_bConnectNodeToCommonGround = 􏵱;
  tInputs.m_uNode = *􏵶node id􏵷;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳

􏷘-􏷗􏷒create bus and apply to ground􏷑
􏷐Adds a specified bus node to the graph, and connects it to ground.􏷏
􏶠Used to construct a bus node into the graph, and then set that node to common ground.􏶡
􏶜􏶝􏷆size_t*const􏷅􏷄node id􏷃􏷀the id to be set when creating the bus􏶿
􏶜c􏶝􏷆char[MAX_NUMBER_OF_CHARACTERS_IN_NODE_NAME]􏷅􏷄name􏷃􏷀the name of the bus being added􏶿
􏶜c􏶝􏷆float􏷅􏷄resistance􏷃􏷀the resistence of the bus being added􏶿
􏶜c􏶝􏷆BOOL􏷅􏷄has flow􏷃􏷀whether or not the bus allows electricity to flow through it.􏶿
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct devices into.􏶿
􏶴
  //create node for part of the 􏶐
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddNode = 􏵱;
  
  //add node to graph
  strcpy(tInputs.m_szName, 􏵶name􏵷);
  tInputs.m_eType = NODE_TYPE_BUS;
  tInputs.m_fResistance = 􏵶resistance􏵷;
  tInputs.m_bHasFlow = 􏵶has flow􏵷;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  *􏵶node id􏵷 = 􏵶graph􏵷->m_uId;
  
  //add device to the ground.
  tInputs.m_bAddNode = 􏵰;
  tInputs.m_bConnectNodeToCommonGround = 􏵱;
  tInputs.m_uNode = *􏵶node id􏵷;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳

􏷘-􏷗􏷒create left panel devices for row 1􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 2,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴stby hor bat􏵵,"Stby Nor Bat",0,􏵱,􏵶graph􏵷); //CB135
    //Vacant                                                                                                         //CB136
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ic amp􏵵,"IC-AMP",0,􏵱,􏵶graph􏵷);             //CB137
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ics cab􏵵,"ICS-CAB",0,􏵱,􏵶graph􏵷);           //CB138
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴dimm test􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"DIMM TEST",0,􏵱,􏵶graph􏵷);       //CB139
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴com4 xcvr􏵵,"COM4 XCVR",0,􏵱,􏵶graph􏵷);       //CB140
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴com4 ctrl􏵵,"COM4 CTRL",0,􏵱,􏵶graph􏵷);       //CB141
    //Vacant                                                                                                         //CB142
􏶳

􏷘-􏷗􏷒create left panel devices for row 2􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 2,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴vhf tx1􏵵,"VHF TX1",0,􏵱,􏵶graph􏵷);                 //CB113
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴nms1􏵵,"NMS1",0,􏵱,􏵶graph􏵷);                       //CB114
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴nms blw􏵵,"NMS BLW",0,􏵱,􏵶graph􏵷);                 //CB115
  //Vacant                                                                                  //CB116
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴lh mon􏵵,"L/H MON",0,􏵱,􏵶graph􏵷);                  //CB117
  //Inactive                                                                                //CB118
  //Inactive                                                                                //CB119
  //Vacant                                                                                  //CB120
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴bambi bucket􏵵,"BAMBI BUCKET",0,􏵱,􏵶graph􏵷);       //CB121
  //Vacant                                                                                  //CB122
  CreateDeviceAndApplyToGround(ptOutputs,&􏵴avio main1􏵵,"AVIO MAIN 1",0,􏵱,􏵶graph􏵷);          //CB123
􏶳

􏷘-􏷗􏷒create left panel devices for row 3􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 3,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fcds2 backup􏵵,"FCDS2 BACKUP",0,􏵱,􏵶graph􏵷); //CB093
    //Inactive                                                                          //CB094
    //Inactive                                                                          //CB095
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pt st cp􏵵,"PT ST CP",0,􏵱,􏵶graph􏵷);         //CB096
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ap2􏵵,"AP2",0,􏵱,􏵶graph􏵷);                   //CB097
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴mir􏵵,"MIR",0,􏵱,􏵶graph􏵷);                   //CB098
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pwr􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"PWR",0,􏵱,􏵶graph􏵷);                   //CB099
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cargo pax lt􏵵,"CARGO PAX LT",0,􏵱,􏵶graph􏵷); //CB100
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cont1 ls lt􏵵,"CONT1 LS LT",0,􏵱,􏵶graph􏵷);   //CB101
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴xfera pump􏵵,"XFERA PUMP",0,􏵱,􏵶graph􏵷);     //CB102
􏶳

􏷘-􏷗􏷒create left panel devices for row 4􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 4,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
  
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fcdm􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FCDM1",0,􏵱,􏵶graph􏵷);                  //CB073
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴nd􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ND1",0,􏵱,􏵶graph􏵷);                      //CB074
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pfd􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"PFD1",0,􏵱,􏵶graph􏵷);                    //CB075
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴blw pel􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"BLW PEL",0,􏵱,􏵶graph􏵷);              //CB076
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴nms12 relay􏵵,"NMS12 RELAY",0,􏵱,􏵶graph􏵷);      //CB077
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ahrs1􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"AHRS1",0,􏵱,􏵶graph􏵷);                  //CB078
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ahrs2􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"AHRS2",0,􏵱,􏵶graph􏵷);                  //CB079
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴adc􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ADC",0,􏵱,􏵶graph􏵷);                      //CB080
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴avio mstr􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"AVIO MSTER",0,􏵱,􏵶graph􏵷);         //CB081
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ess avio main􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ESS AVIO MAIN",0,􏵱,􏵶graph􏵷); //CB082
􏶳

􏷘-􏷗􏷒create left panel devices for row 5􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 5,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    //Vacant                     //CB053
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ics􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"ICS",0,􏵱,􏵶graph􏵷);          //CB054
    //Vacant                     //CB055
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴instr lights􏵵,"INSTR LIGHTS",0,􏵱,􏵶graph􏵷);  //CB056
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴p1 sas􏵵,"P1 SAS",0,􏵱,􏵶graph􏵷);        //CB057
    //Vacant                     //CB058
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴htg cont􏵵,"HTG CONT",0,􏵱,􏵶graph􏵷);      //CB059
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ckpt vent􏵵,"CKPT VENT",0,􏵱,􏵶graph􏵷);     //CB060
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ftr􏵵,"FTR",0,􏵱,􏵶graph􏵷);          //CB061
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴roll1 sas􏵵,"ROLL1 SAS",0,􏵱,􏵶graph􏵷);     //CB062
􏶳

􏷘-􏷗􏷒create left panel devices for row 6􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 6,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    //Inactive                   //CB035
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴floats􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FLOATS",0,􏵱,􏵶graph􏵷);       //CB036
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cont􏵵,"CONT",0,􏵱,􏵶graph􏵷);         //CB037
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cc pil􏵵,"CC PIL",0,􏵱,􏵶graph􏵷);        //CB038
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴boom􏵵,"BOOM",0,􏵱,􏵶graph􏵷);         //CB039
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pos􏵵,"POS",0,􏵱,􏵶graph􏵷);          //CB040
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ldg􏵵,"LDG",0,􏵱,􏵶graph􏵷);          //CB041
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ckpt􏵵,"CKPT",0,􏵱,􏵶graph􏵷);         //CB042
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴var nr􏵵,"VAR NR",0,􏵱,􏵶graph􏵷);        //CB043
􏶳

􏷘-􏷗􏷒create left panel devices for row 7􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 7,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴sand filt􏵵,"SAND FILT",0,􏵱,􏵶graph􏵷);     //CB017
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴wiper􏵵,"WIPER",0,􏵱,􏵶graph􏵷);        //CB018
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴tq n2􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"TQ N2",0,􏵱,􏵶graph􏵷);         //CB019
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ovsp􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"OVSP",0,􏵱,􏵶graph􏵷);         //CB020
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴prime p􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"PRIME P",0,􏵱,􏵶graph􏵷);       //CB021
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fire d􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FIRE D",0,􏵱,􏵶graph􏵷);        //CB022
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fuel v􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FIRE V",0,􏵱,􏵶graph􏵷);        //CB023
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ign􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"IGN",0,􏵱,􏵶graph􏵷);          //CB024
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴start􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"START",0,􏵱,􏵶graph􏵷);        //CB025
􏶳

􏷘-􏷗􏷒create left panel devices for row 8􏷑
􏷐Constructs all of the electrical components that make up the left portion of the 􏶏 in row 8,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its left panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴gen􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"GEN",0,􏵱,􏵶graph􏵷);          //CB001
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴bt􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"BT",0,􏵱,􏵶graph􏵷);           //CB002
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fire e􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FIRE E",0,􏵱,􏵶graph􏵷);        //CB003
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fuel l􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"FUEL L",0,􏵱,􏵶graph􏵷);        //CB004
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴hyd p􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"HTD P",0,􏵱,􏵶graph􏵷);         //CB005
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴wu􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"WU",0,􏵱,􏵶graph􏵷);           //CB006
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cad􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"CAD",0,􏵱,􏵶graph􏵷);          //CB007
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴vemd􏵵[ELECTRICAL_SYSTEM_SIDE_LEFT],"VEMD",0,􏵱,􏵶graph􏵷);         //CB008
􏶳

􏷘-􏷗􏷒create right panel devices for row 1􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 1,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    //Vacant                     //CB143
    //Vacant                     //CB144
    //Vacant                     //CB145
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴dimm test􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"DIMM TEST 2",0,􏵱,􏵶graph􏵷);    //CB146
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ics backup􏵵,"ICS BACKUP",0,􏵱,􏵶graph􏵷);    //CB147
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴nms2􏵵,"NMS2",0,􏵱,􏵶graph􏵷);         //CB148
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴bat em ex lt􏵵,"BAT EM EX LT",0,􏵱,􏵶graph􏵷);    //CB149
􏶳

􏷘-􏷗􏷒create right panel devices for row 2􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 2,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴avio main 2􏵵,"AVIO MAIN 2",0,􏵱,􏵶graph􏵷);    //CB124
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴emer bat􏵵,"EMER BAT",0,􏵱,􏵶graph􏵷);      //CB125
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴video dist􏵵,"VIDEO DIST",0,􏵱,􏵶graph􏵷);    //CB126
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴rh mon􏵵,"RH MON",0,􏵱,􏵶graph􏵷);        //CB127
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴mov map􏵵,"MOV MAP",0,􏵱,􏵶graph􏵷);       //CB128
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴rad alt􏵵,"RAD ALT",0,􏵱,􏵶graph􏵷);       //CB129
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴dme􏵵,"DME",0,􏵱,􏵶graph􏵷);          //CB130
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cm3 ant􏵵,"CM3 ANT",0,􏵱,􏵶graph􏵷);       //CB131
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cm3 rt􏵵,"CM3 RT",0,􏵱,􏵶graph􏵷);        //CB132
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴mkr􏵵,"MKR",0,􏵱,􏵶graph􏵷);          //CB133
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴com5 xcvr􏵵,"COM5 XCVR",0,􏵱,􏵶graph􏵷);     //CB134
􏶳

􏷘-􏷗􏷒create right panel devices for row 3􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 3,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴htgv􏵵,"HTGV",0,􏵱,􏵶graph􏵷);         //CB103
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴inst cool􏵵,"INST COOL",0,􏵱,􏵶graph􏵷);     //CB104
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pax blw􏵵,"PAX BLW",0,􏵱,􏵶graph􏵷);       //CB105
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pwr􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"PWR",0,􏵱,􏵶graph􏵷);          //CB106
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cont2􏵵,"CONT 2",0,􏵱,􏵶graph􏵷);        //CB107
    //Vacant                     //CB108
    //Inactive                   //CB109
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴atc􏵵,"ATC",0,􏵱,􏵶graph􏵷);          //CB110
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴waas relay􏵵,"X",0,􏵱,􏵶graph􏵷);    //CB111
    //Inactive                   //CB112
􏶳

􏷘-􏷗􏷒create right panel devices for row 4􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 4,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ess avio main􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ESS AVIO MAIN 2",0,􏵱,􏵶graph􏵷); //CB083
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴avio mstr􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"AVIO MAST",0,􏵱,􏵶graph􏵷);     //CB084
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴adc􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ADC",0,􏵱,􏵶graph􏵷);          //CB085
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ahrs1􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"AHR S1",0,􏵱,􏵶graph􏵷);        //CB086
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ahrs2􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"AH2 S2",0,􏵱,􏵶graph􏵷);        //CB087
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴roll2 sema􏵵,"ROLL2 SEMA",0,􏵱,􏵶graph􏵷);    //CB088
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴blw pel􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"BLW PEL",0,􏵱,􏵶graph􏵷);       //CB089
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pfd􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"PFD2",0,􏵱,􏵶graph􏵷);         //CB090
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴nd􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ND2",0,􏵱,􏵶graph􏵷);          //CB091
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fcdm􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FCDM2",0,􏵱,􏵶graph􏵷);        //CB092

􏶳

􏷘-􏷗􏷒create right panel devices for row 5􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 5,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴yaw sas􏵵,"YAW SAS",0,􏵱,􏵶graph􏵷);       //CB063
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴beep trim􏵵,"BEEP TRIM",0,􏵱,􏵶graph􏵷);     //CB064
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴mast mom􏵵,"MAST MON",0,􏵱,􏵶graph􏵷);      //CB065
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴xferf pump􏵵,"XFERF PUMP",0,􏵱,􏵶graph􏵷);    //CB066
    //Vacant                     //CB067
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴p2 sema􏵵,"P2 SEMA",0,􏵱,􏵶graph􏵷);       //CB068
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ap1􏵵,"AP1",0,􏵱,􏵶graph􏵷);          //CB069
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴altm vibr􏵵,"ALTM VIBR",0,􏵱,􏵶graph􏵷);     //CB070
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ics􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"ICS",0,􏵱,􏵶graph􏵷);          //CB071
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴vhf tx2􏵵,"VHF TX2",0,􏵱,􏵶graph􏵷);       //CB072
􏶳

􏷘-􏷗􏷒create right panel devices for row 6􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 6,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴n2 trim􏵵,"N2 TRIM",0,􏵱,􏵶graph􏵷);       //CB044
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴instr􏵵,"INSTR",0,􏵱,􏵶graph􏵷);        //CB045
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴acol􏵵,"ACOL",0,􏵱,􏵶graph􏵷);         //CB046
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴em ex􏵵,"EM/EX",0,􏵱,􏵶graph􏵷);         //CB047
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cc ped winch􏵵,"CC-PED WINCH",0,􏵱,􏵶graph􏵷);   //CB048
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴aux tank􏵵,"AUX TANK",0,􏵱,􏵶graph􏵷);      //CB049
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴pt st plt􏵵,"PT ST PLT",0,􏵱,􏵶graph􏵷);      //CB050
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴floats􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FLOATS",0,􏵱,􏵶graph􏵷);       //CB051
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴dwnlnk adu b􏵵,"DWNLNK ADU B",0,􏵱,􏵶graph􏵷);   //CB052
􏶳

􏷘-􏷗􏷒create right panel devices for row 7􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 7,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴start􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"START",0,􏵱,􏵶graph􏵷);        //CB026
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ign􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"IGN",0,􏵱,􏵶graph􏵷);          //CB027
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fuel v􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FUEL V",0,􏵱,􏵶graph􏵷);        //CB028
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fire d􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FIRE D",0,􏵱,􏵶graph􏵷);        //CB029
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴prime p􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"PRIME P",0,􏵱,􏵶graph􏵷);       //CB030
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴ovsp􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"OVSP",0,􏵱,􏵶graph􏵷);         //CB031
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴tq n2􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"TQ N2",0,􏵱,􏵶graph􏵷);         //CB032
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴rotor rpm􏵵,"ROTOR RPM",0,􏵱,􏵶graph􏵷);     //CB033
􏶳

􏷘-􏷗􏷒create right panel devices for row 8􏷑
􏷐Constructs all of the electrical components that make up the right portion of the 􏶏 in row 8,
and put them into the generic electrical graph data structure.􏷏
􏶠This will give all of the created devices a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its right panel devices into.􏶿
􏶴
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴vemd􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"VEMD",0,􏵱,􏵶graph􏵷);         //CB009
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴cad􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"CAD",0,􏵱,􏵶graph􏵷);          //CB010
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴wu􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"WU",0,􏵱,􏵶graph􏵷);           //CB011
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴hyd p􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"HYD P",0,􏵱,􏵶graph􏵷);         //CB012
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fuel l􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FUEL L",0,􏵱,􏵶graph􏵷);        //CB013
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴fire e􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"FUEL E",0,􏵱,􏵶graph􏵷);        //CB014
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴bt􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"BT",0,􏵱,􏵶graph􏵷);           //CB015
    CreateDeviceAndApplyToGround(ptOutputs,&􏵴gen􏵵[ELECTRICAL_SYSTEM_SIDE_RIGHT],"GEN",0,􏵱,􏵶graph􏵷);          //CB016
􏶳

􏷘-􏷗􏷒connect devices􏷑
􏷐Connects all of the necessary 􏶐 devices and buses together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will set these connections into.􏶿
􏶴
  size_t unIndex = FIRST_ELECTRICAL_SYSTEM_SIDE;
  for (; unIndex < NUM_ELECTRICAL_SYSTEM_SIDES; ++unIndex){
    
      //row 1
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴dimm test􏵵[unIndex]);
      
      //row 3
      ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,unIndex,􏵴pwr􏵵[unIndex]);

      //row 4
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴fcdm􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴nd􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴pfd􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴blw pel􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ahrs1􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ahrs2􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴adc􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴avio mstr􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ess avio main􏵵[unIndex]);

      //row 5
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ics􏵵[unIndex]);
      
      //row 6
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴floats􏵵[unIndex]);
      
      //row 7
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ovsp􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴prime p􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴fire d􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴fuel v􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴ign􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴start􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴tq n2􏵵[unIndex]);

      //row 8
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴gen􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴bt􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴fire e􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴fuel l􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴hyd p􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴wu􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴cad􏵵[unIndex]);
      ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,unIndex,􏵴vemd􏵵[unIndex]);
  }
  
//row 1
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴stby hor bat􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ic amp􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ics cab􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴com4 xcvr􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴com4 ctrl􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴ics backup􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴nms2􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴bat em ex lt􏵵);

//row 2
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴vhf tx1􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴nms1􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴nms blw􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴lh mon􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴bambi bucket􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴avio main1􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴avio main 2􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴emer bat􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴video dist􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴rh mon􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴mov map􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴rad alt􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴dme􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴cm3 ant􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴cm3 rt􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴mkr􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴com5 xcvr􏵵);

//row 3
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴fcds2 backup􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴pt st cp􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ap2􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴mir􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴cargo pax lt􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴cont1 ls lt􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴xfera pump􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴htgv􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴inst cool􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴pax blw􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴cont2􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴atc􏵵);
ConnectDeviceWithShed(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴waas relay􏵵);

//row 4
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴nms12 relay􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴roll2 sema􏵵);

//row 5
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴instr lights􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴p1 sas􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴htg cont􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ckpt vent􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ftr􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴roll1 sas􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴yaw sas􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴beep trim􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴mast mom􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴xferf pump􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴p2 sema􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴ap1􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴altm vibr􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴vhf tx2􏵵);

//row 6
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴cont􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴cc pil􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴boom􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴pos􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ldg􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴ckpt􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴var nr􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴n2 trim􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴instr􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴acol􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴em ex􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴cc ped winch􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴aux tank􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴pt st plt􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴dwnlnk adu b􏵵);

//row 7
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴sand filt􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_LEFT,􏵴wiper􏵵);
ConnectDeviceWithEssential(ptOutputs,􏵶graph􏵷,ELECTRICAL_SYSTEM_SIDE_RIGHT,􏵴rotor rpm􏵵);
􏶳


􏷘-􏷗􏷒connect device with essential􏷑
􏷐Connects all of the necessary 􏶐 devices to the essential bus􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will set these connections into.􏶿
􏶜c􏶝􏷆ElectricalSystemSideE􏷅􏷄side􏷃􏷀Specify what side on the overhead panel.􏶿
􏶜c􏶝􏷆size_t􏷅􏷄device􏷃􏷀The device in which to connect to the bus.􏶿
􏶴
  //connect two nodes trigger
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddWire = 􏵱;
  
  //connect device and bus
  tInputs.m_uNodeX = 􏵶device􏵷;
  tInputs.m_uNodeY = 􏵴essential bus􏵵[􏵶side􏵷];
  tInputs.m_fResistance = 0;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳
􏷘-􏷗􏷒connect device with shed􏷑
􏷐Connects all of the necessary 􏶐 devices to the essential bus􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will set these connections into.􏶿
􏶜c􏶝􏷆ElectricalSystemSideE􏷅􏷄side􏷃􏷀Specify what side on the overhead panel.􏶿
􏶜c􏶝􏷆size_t􏷅􏷄device􏷃􏷀The device in which to connect to the bus.􏶿
􏶴
  //connect two nodes trigger
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddWire = 􏵱;
  
  //connect device and bus
  tInputs.m_uNodeX = 􏵶device􏵷;
  tInputs.m_uNodeY = 􏵴shed bus􏵵[􏵶side􏵷];
  tInputs.m_fResistance = 0;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳


􏶨The IDs of the left and right essential bus which are used to connect essential devices.􏶧
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬essential bus􏶫􏶪0􏶩

􏶨The IDs of the left and right shed bus which are used to connect shed devices.􏶧
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[2]􏶭􏶬shed bus􏶫􏶪0􏶩

􏶨Row 1 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬stby hor bat􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ic amp􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ics cab􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬com4 xcvr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬com4 ctrl􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬dimm test􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ics backup􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nms2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬bat em ex lt􏶫􏶪0􏶩􏶨􏶧􏶦􏶥

􏶨Row 2 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬vhf tx1􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nms1􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nms blw􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬lh mon􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬bambi bucket􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬avio main1􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬avio main 2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬emer bat􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬video dist􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬rh mon􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬mov map􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬rad alt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬dme􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cm3 ant􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cm3 rt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬mkr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬com5 xcvr􏶫􏶪0􏶩􏶨􏶧􏶦􏶥

􏶨Row 3 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fcds2 backup􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬pt st cp􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ap2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬mir􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬pwr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cargo pax lt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cont1 ls lt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬xfera pump􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬htgv􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬inst cool􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬pax blw􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cont2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬atc􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬waas relay􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥

􏶨Row 4 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬fcdm􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬nd􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬pfd􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬blw pel􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nms12 relay􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ahrs1􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ahrs2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬adc􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬avio mstr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ess avio main􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬roll2 sema􏶫􏶪0􏶩
􏶨􏶧􏶦􏶥


􏶨Row 5 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ics􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬instr lights􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬p1 sas􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬htg cont􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ckpt vent􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ftr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬roll1 sas􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬yaw sas􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬beep trim􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬mast mom􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬xferf pump􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬p2 sema􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ap1􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬altm vibr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬vhf tx2􏶫􏶪0􏶩􏶨􏶧􏶦􏶥

􏶨Row 6 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬floats􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cont􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cc pil􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬boom􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬pos􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ldg􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬ckpt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬var nr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬n2 trim􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬instr􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬acol􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬em ex􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬cc ped winch􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬aux tank􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬pt st plt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬dwnlnk adu b􏶫􏶪0􏶩􏶨􏶧􏶦􏶥

􏶨Row 7 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬sand filt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬wiper􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ovsp􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬prime p􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬fire d􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬fuel v􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬ign􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬start􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬tq n2􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬rotor rpm􏶫􏶪0􏶩􏶨􏶧􏶦􏶥


􏶨Row 8 􏶏 devices􏶧
􏶦This ID will be used to query the generic electrical graph and recieve back the actual device node.􏶥
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬gen􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬bt􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬fire e􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬fuel l􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬hyd p􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬wu􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬cad􏶫􏶪0􏶩
􏶌observe􏶑􏶘-􏶙􏶰􏶯􏶮size_t[NUM_ELECTRICAL_SYSTEM_SIDES]􏶭􏶬vemd􏶫􏶪0􏶩􏶨􏶧􏶦􏶥