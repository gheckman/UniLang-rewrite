􏶞g􏶟
􏷲unpacks the relevant J2 messages􏷱
􏷰Based off version 2.4 of the ICD.
It would have been nice to automate the network packing/unpacking.
Or use compiler pragmas to stop padding, and make grabbing of struct chunks possible.

Message sent from Flight Model to Sim Host
+----------------+----------------+----------------+------------------+----------------+
|        0       |       1-2      |        3       |       4-7        |     4-4095     |
+----------------+----------------+----------------+------------------+----------------+
|  Message Type  |   Byte Count   |  Message Ver.  | Frame Counter    |     Payload    |
+----------------+----------------+----------------+------------------+----------------+
^                                                                     ^
+--------------------- HEADER ----------------------------------------+


Message sent from Sim Host to Flight Model
+----------------+----------------+----------------+----------------+
|        0       |       1-2      |        3       |     4-4095     |
+----------------+----------------+----------------+----------------+
|  Message Type  |   Byte Count   |  Message Ver.  |     Payload    |
+----------------+----------------+----------------+----------------+
^                                                  ^
+--------------------- HEADER ---------------------+

 - Message Unpacking (callable)
 - Header UnPpcking (hidden)
 - Payload Unpacking (hidden)
􏷯
􏷮J2_Connection􏷭􏷮Network􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦J2MessageTypes.h􏷥􏷢USES: SimhostToJ2MessageTypeE􏷡
􏷤􏷣􏷦SendToJ2Messages.h􏷥􏷢USES: SendHighSpeedMessageT, SendLowSpeedMessageT, SendRepositionMessageT, SendVersionRequestMessageT􏷡
􏷤􏷣􏷦ReceiveFromJ2Messages.h􏷥􏷢USES: RcvHighSpeedMessageT, RcvLowSpeedMessageT, RcvEngineDataMessageT, FlightModelEngineMessageT, FlightModelPropellerMessageT, RepositionMessageReplyT, VersionMessageReplyT􏷡
􏷤􏷣􏷦stddef.h􏷥􏷢USES: size_t􏷡
􏷤􏷣􏷦Defs.h􏷥􏷢USES: BYTE􏷡
􏶔􏶕􏶒PackUtilities.h􏶓􏶖USES: UnpackBigEndian4ByteInvariance(), UnpackFirstNArrayElements()􏶗
􏶔􏶕􏶒J2MessageHeader.h􏶓􏶖USES: J2MessageHeaderT􏶗
􏶔􏶕􏶒strLib.h􏶓􏶖USES: memcpy()􏶗
􏶔􏶕􏶒stdio.h􏶓􏶖USES: fprintf()􏶗

􏵺method for unpacking regular variables according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UNPACK_VAR(X)􏵿􏵖􏵗􏵼UnpackBigEndian4ByteInvariance(pucBuffer, puBufferIterator, &X, sizeof(X))􏵽

􏵺method for fully unpacking arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UnPack_Full_Array(X)􏵿􏵖􏵗􏵼UnpackBigEndian4ByteInvariance(pucBuffer, puBufferIterator, X, sizeof(X))􏵽

􏵺method for partially unpacking arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UnPack_Partial_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼UnpackFirstNArrayElements(pucBuffer, puBufferIterator, X, sizeof(X[0]), AMOUNT, MAX)􏵽

􏵺method for partially unpacking engine arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UNPACK_PARTIAL_ENGINE_ARRAY(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyUnpackEngineArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially upacking propeller arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UnPack_Partial_Propeller_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyUnpackPropellerArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially unpacking engine reposition arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_UNPACK_PARTIAL_ENGINE_REPOSITION_ARRAY(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyUnpackEngineRepositionArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially unpacking propeller reposition arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_Unpack_Partial_Propeller_Reposition_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyUnpackPropellerRepositionArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽



􏷘+􏷗􏷒unpack j2 high speed send message􏷑
􏷐Used to unpack the incoming J2 high speed message.
From SimHost to Flight Model􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆SendHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = SIMHOST_TO_FLIGHT_MODEL_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,FALSE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"high speed")){
      􏵲unpack j2 high speed send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 low speed send message􏷑
􏷐Used to unpack the incoming J2 low speed message.
From SimHost to Flight Model􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆SendLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = SIMHOST_TO_FLIGHT_MODEL_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,FALSE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"low speed")){
      􏵲unpack j2 low speed send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 reposition send message􏷑
􏷐Used to unpack the incoming J2 reposition.
From SimHost to Flight Model􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆SendRepositionMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = SIMHOST_TO_FLIGHT_MODEL_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,FALSE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"reposition")){
      􏵲unpack j2 reposition send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 version request message􏷑
􏷐Used to unpack the incoming J2 version request.
From SimHost to Flight Model􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆SendVersionRequestMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = SIMHOST_TO_FLIGHT_MODEL_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,FALSE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"version")){
      􏵲unpack j2 version request message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳


􏷘+􏷗􏷒unpack j2 high speed received message􏷑
􏷐Used to unpack the incoming J2 high speed message.
From Flight Model to SimHost􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆RcvHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = FLIGHT_MODEL_TO_SIMHOST_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,TRUE);
    //if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"high speed")){
      􏵲unpack j2 high speed received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    //}
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 low speed received message􏷑
􏷐Used to unpack the incoming J2 low speed message.
From Flight Model to SimHost􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆RcvLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = FLIGHT_MODEL_TO_SIMHOST_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,TRUE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"low speed")){
      􏵲unpack j2 low speed received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 engine received message􏷑
􏷐Used to unpack the incoming J2 engine message.
From Flight Model to SimHost􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆RcvEngineDataMessageT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = FLIGHT_MODEL_TO_SIMHOST_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,TRUE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"engine")){
      􏵲unpack j2 engine received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 reposition received message􏷑
􏷐Used to unpack the incoming J2 reposition message.
From Flight Model to SimHost􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆RepositionMessageReplyT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = FLIGHT_MODEL_TO_SIMHOST_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,TRUE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"reposition")){
      􏵲unpack j2 reposition received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳

􏷘+􏷗􏷒unpack j2 version received message􏷑
􏷐Used to unpack the incoming J2 version request message.
From Flight Model to SimHost􏷏
􏶠Called after receiving a J2 Message.􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to unpack the message from􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The size of the buffer in bytes􏶿
􏶜rm􏶝􏷆VersionMessageReplyT􏷅􏷄message􏷃􏷀The message to unpack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer; 0 indicates an unsuccessful unpack􏶹
􏶴
    size_t uByteIterator = FLIGHT_MODEL_TO_SIMHOST_HEADER_SIZE;
    J2MessageHeaderT tHeader = 􏵲unpack header􏵳􏵶buffer􏵷,TRUE);
    if (􏵲message size matches header claim􏵳tHeader,􏵶buffer size􏵷,"version")){
      􏵲unpack j2 version received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
      return uByteIterator;
    }
    return 0;
􏶳





􏷘-􏷗􏷒unpack j2 high speed send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific unpacking for high speed􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆SendHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
  J2_UNPACK_VAR(􏵶message􏵷->m_fPitchFlightControl);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRollFlightControl);
  J2_UNPACK_VAR(􏵶message􏵷->m_fYawFlightControl);
  J2_UNPACK_VAR(􏵶message􏵷->m_fCollectiveFlightControl);
  J2_UNPACK_VAR(􏵶message􏵷->m_fPitchTrimPosition);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRollTrimPosition);
  J2_UNPACK_VAR(􏵶message􏵷->m_fYawTrimPosition);
  J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfYawSerialActuators);
  J2_UNPACK_VAR(􏵶message􏵷->m_fYawTrimActuators);
  J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfRollSerialActuators);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRollTrimActuators);
  J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfPitchSerialActuators);
  J2_UNPACK_VAR(􏵶message􏵷->m_fPitchTrimActuators);
  J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfCollectiveSerialActuators);
  J2_UNPACK_VAR(􏵶message􏵷->m_fCollectiveTrimActuators);
  J2_UNPACK_VAR(􏵶message􏵷->m_nYawControlOverrideFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_nPitchControlOverrideFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_nRollControlOverrideFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_nCollectiveControlOverrideFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRightBrake);
  J2_UNPACK_VAR(􏵶message􏵷->m_fLeftBrake);
  J2_UNPACK_VAR(􏵶message􏵷->m_fNoseWheelControl);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRotorBrake);
  J2_UNPACK_VAR(􏵶message􏵷->m_nWinchFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWinchLength_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWinchPayloadMass_kg);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWinchPayloadX_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWinchPayloadY_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWinchPayloadZ_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_nHookFlag);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHookLength_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHookPayloadMass_kg);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHookPayloadX_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHookPayloadY_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHookPayloadZ_m);
  J2_UNPACK_VAR(􏵶message􏵷->m_nSASMode);
  J2_UNPACK_VAR(􏵶message􏵷->m_fHeightOfTerrain_ft);
    
  􏶲contact point unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfContactPoints);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfGroundContactLocation_ft,􏵶message􏵷->m_nNumberOfContactPoints,NUM_CONTACT_LOCATION);
  
  􏶲engine related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfThrottle,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfMixture,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  
  􏶲propeller unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfPropPitch_deg,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
  
  􏶲fuel tank unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfTanks);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfFuelWeight_lbs,􏵶message􏵷->m_nNumberOfTanks,MAX_NUMBER_OF_FUEL_TANKS);
  
  J2_UNPACK_VAR(􏵶message􏵷->m_nFlag1);
􏶳

􏷘-􏷗􏷒unpack j2 low speed send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific unpacking for low speed􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆SendLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
  􏶲gear related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfGears);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnGearRequestedPosition_pct,􏵶message􏵷->m_nNumberOfGears,MAX_NUMBER_OF_LANDING_GEARS);
    
  􏶲flap related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfFlaps);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnFlapRequestedPosition_pct,􏵶message􏵷->m_nNumberOfFlaps,MAX_NUMBER_OF_FLAPS);
    
  􏶲speed brake related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfSpeedBrakes);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnSpeedBrakeRequestedPosition_pct,􏵶message􏵷->m_nNumberOfSpeedBrakes,MAX_NUMBER_OF_SPEED_BRAKES);
    
  J2_UNPACK_VAR(􏵶message􏵷->m_fSeaLevelPressure_inHg);
  J2_UNPACK_VAR(􏵶message􏵷->m_fSeaLevelTemperature_degf);
  J2_UNPACK_VAR(􏵶message􏵷->m_fRunwayRoughness);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWindMagnitude_kts);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWindHeading_deg);
  J2_UNPACK_VAR(􏵶message􏵷->m_fWindInclination_deg);
  J2_UNPACK_VAR(􏵶message􏵷->m_fTurbulence);
  J2_UNPACK_VAR(􏵶message􏵷->m_fPayloadWeight_lbs);
  J2_UNPACK_VAR(􏵶message􏵷->m_fCGOffsetX_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_fCGOffsetY_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_fCGOffsetZ_in);
    
  􏶲engine related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineStarterRunning,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnBleedAir,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnIgnition,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineFlags1,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineInletState,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfIceStateEngine_in,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineFailureFlags,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  
  􏶲propeller related unpacking􏶱
  J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
  J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfIceStatesProp_in,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
    
  J2_UNPACK_VAR(􏵶message􏵷->m_fIceStateRightWing_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_fIceStateLeftWing_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_fIceStateFuselage_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_fIceStateTail_in);
  J2_UNPACK_VAR(􏵶message􏵷->m_nTimeMultiplier);
  J2_UNPACK_VAR(􏵶message􏵷->m_nFailureFlags1);
􏶳

􏷘-􏷗􏷒unpack j2 reposition send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific unpacking for reposition􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆SendRepositionMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_nRepositionType);
    J2_UNPACK_VAR(􏵶message􏵷->m_dLatitude_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_dLongitude_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_dMSLAltitude_ft);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMagneticHeading_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fIndicatedAirspeed_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAircraftPitch_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAircraftRoll_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fVerticalSpeed_fpm);

    􏶲engine related unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
    J2_UNPACK_PARTIAL_ENGINE_REPOSITION_ARRAY(􏵶message􏵷->m_ptEngine,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);

    􏶲propeller related unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
    J2_UNPACK_PARTIAL_PROPELLER_REPOSITION_ARRAY(􏵶message􏵷->m_ptPropeller,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
    
    J2_UNPACK_VAR(􏵶message􏵷->m_fPitchFlightControl);
    J2_UNPACK_VAR(􏵶message􏵷->m_fRollFlightControl);
    J2_UNPACK_VAR(􏵶message􏵷->m_fYawFlightControl);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCollectiveFlightControl);
􏶳

􏷘-􏷗􏷒unpack j2 version request message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific unpacking for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆SendVersionRequestMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    //payload is empty
􏶳




􏷘-􏷗􏷒unpack j2 high speed received message payload􏷑
􏷐Used to pack the incoming J2 high speed payload.
From Flight Model to SimHost􏷏
􏶠specific unpacking for high speed􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆RcvHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_dLatitude_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_dLongitude_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_dMSLAltitude_ft);
    J2_UNPACK_VAR(􏵶message􏵷->m_fTheta_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPsi_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fBeta_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPhi_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAlpha_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fSlip_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAngleOfAttack);
    J2_UNPACK_VAR(􏵶message􏵷->m_fVelocityX_mps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fVelocityY_mps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fVelocityZ_mps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAccelX_mpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAccelY_mpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAccelZ_mpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPitchRate_dps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fRollRate_dps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fYawRate_dps);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPitchAccel_dpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fRollAccel_dpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fYawAccel_dpss);
    J2_UNPACK_VAR(􏵶message􏵷->m_fTrueAirspeedLong_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fTrueAirspeedLat_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fTrueAirspeedVert_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fGroundSpeed_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fVerticalSpeed_fpm);
    J2_UNPACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedLong_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedLat_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedVert_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMachNumber);
    J2_UNPACK_VAR(􏵶message􏵷->m_fNorthVelocity_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fEastVelocity_kts);
    J2_UNPACK_VAR(􏵶message􏵷->m_fDynamicPressure_Pa);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMagneticHeading_deg);
    
    
    􏶲landing gear unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfLandingGears);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfWeightOnLandingGear_lbs,􏵶message􏵷->m_nNumberOfLandingGears,MAX_NUMBER_OF_LANDING_GEARS);
    
    
    J2_UNPACK_VAR(􏵶message􏵷->m_nFlag1);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetX_m);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetY_m);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetZ_m);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetX_m);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetY_m);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetZ_m);
    J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfYawSerialActuators);
    J2_UNPACK_VAR(􏵶message􏵷->m_fYawTrimActuators);
    J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfRollSerialActuators);
    J2_UNPACK_VAR(􏵶message􏵷->m_fRollTrimActuators);
    J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfPitchSerialActuators);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPitchTrimActuators);
    J2_UNPACK_FULL_ARRAY(􏵶message􏵷->m_pfCollectiveSerialActuators);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCollectiveTrimActuators);
    
    􏶲surface unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfSurfaces);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceQ,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceAngleOfIncidence,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceTorque,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    
    J2_UNPACK_VAR(􏵶message􏵷->m_fBuffetMagnitude);
    
    􏶲spare bucket unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nSpareBucketSize);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSpareBucket,􏵶message􏵷->m_nSpareBucketSize,MAX_SPARE_BUCKET_SIZE);
􏶳

􏷘-􏷗􏷒unpack j2 low speed received message payload􏷑
􏷐Used to pack the incoming J2 low speed payload.
From Flight Model to SimHost􏷏
􏶠specific unpacking for low speed􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆RcvLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fOutsideAirTemperature_degf);
    J2_UNPACK_VAR(􏵶message􏵷->m_fOutsideAirPressure_inHg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fNoseWheelPosition_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMagneticVariation_deg);
􏶳

􏷘-􏷗􏷒unpack j2 engine received message payload􏷑
􏷐Used to pack the incoming J2 engine payload.
From Flight Model to SimHost􏷏
􏶠specific unpacking for engine􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆RcvEngineDataMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    size_t uIndex = 0;
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
    J2_UNPACK_PARTIAL_ENGINE_ARRAY(􏵶message􏵷->m_ptEngine,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);

    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
    J2_UNPACK_PARTIAL_PROPELLER_ARRAY(􏵶message􏵷->m_ptPropeller,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
􏶳

􏷘-􏷗􏷒unpack j2 reposition received message payload􏷑
􏷐Used to pack the incoming J2 reposition payload.
From Flight Model to SimHost􏷏
􏶠specific unpacking for reposition􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆RepositionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fYawControlPosition);
    J2_UNPACK_VAR(􏵶message􏵷->m_fThrottlePosition);
    J2_UNPACK_VAR(􏵶message􏵷->m_fLateralControlPosition);
    J2_UNPACK_VAR(􏵶message􏵷->m_fLongitudinalControlPosition);
􏶳

􏷘-􏷗􏷒unpack j2 version received message payload􏷑
􏷐Used to pack the incoming J2 version request payload.
From Flight Model to SimHost􏷏
􏶠specific unpacking for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆VersionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fJ2Version);
    J2_UNPACK_VAR(􏵶message􏵷->m_fAircraftModel);
    
    􏶲dev item unpacking􏶱
    J2_UNPACK_VAR(􏵶message􏵷->m_nNumberOfDeveloperItems);
    J2_UNPACK_PARTIAL_ARRAY(􏵶message􏵷->m_szDevItem,􏵶message􏵷->m_nNumberOfDeveloperItems,MAX_DEV_ITEMS);
􏶳







􏷘-􏷗􏷒partially unpack engine array􏷑
􏷐Used to partially pack the incoming J2 engine array.
From Flight Model to SimHost􏷏
􏶠specific unpacking for engine struct􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜m􏶝􏷆FlightModelEngineMessageT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲unpack engine struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳

􏷘-􏷗􏷒partially unpack propeller array􏷑
􏷐Used to partially pack the incoming J2 propeller array.
From Flight Model to SimHost􏷏
􏶠specific unpacking for propeller struct􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜m􏶝􏷆FlightModelPropellerMessageT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲unpack propeller struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳



􏷘-􏷗􏷒unpack engine struct􏷑
􏷐Used to pack the incoming J2 engine struct.
From Flight Model to SimHost􏷏
􏶠specific unpacking for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆FlightModelEngineMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fN1_pct);
    J2_UNPACK_VAR(􏵶message􏵷->m_fN2_pct);
    J2_UNPACK_VAR(􏵶message􏵷->m_fTorque_ftlbs);
    J2_UNPACK_VAR(􏵶message􏵷->m_fFuelFlow_pph);
    J2_UNPACK_VAR(􏵶message􏵷->m_fOilTemperature_degf);
    J2_UNPACK_VAR(􏵶message􏵷->m_fOilPressure_psi);
    J2_UNPACK_VAR(􏵶message􏵷->m_fExhaustGasTemperature_degf);
    J2_UNPACK_VAR(􏵶message􏵷->m_fCylinderHeadTemperature_degf);
    J2_UNPACK_VAR(􏵶message􏵷->m_fEngineRPM);
    J2_UNPACK_VAR(􏵶message􏵷->m_fEngineThrust_lbs);
    J2_UNPACK_VAR(􏵶message􏵷->m_fManifoldPressure_inHg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fInletTurbineTemperature_degc);
    J2_UNPACK_VAR(􏵶message􏵷->m_fBleedAirPressureGenerated_psi);
􏶳

􏷘-􏷗􏷒unpack propeller struct􏷑
􏷐Used to pack the incoming J2 propeller struct.
From Flight Model to SimHost􏷏
􏶠specific unpacking for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜rm􏶝􏷆FlightModelPropellerMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fPropRPM);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPropPitch_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMastMomentDirection_deg);
    J2_UNPACK_VAR(􏵶message􏵷->m_fMastMomentForce_Nm);
􏶳









􏷘-􏷗􏷒partially unpack engine reposition array􏷑
􏷐Used to partially pack the incoming J2 engine reposition array.
From SimHost to Flight Model􏷏
􏶠specific unpacking for engine reposition struct􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜m􏶝􏷆EngineRepositionT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲unpack engine reposition struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳

􏷘-􏷗􏷒partially unpack propeller reposition array􏷑
􏷐Used to partially pack the incoming J2 propeller reposition array.
From SimHost to Flight Model􏷏
􏶠specific unpacking for propeller reposition struct􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜m􏶝􏷆PropellerRepositionT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲unpack propeller reposition struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳



􏷘-􏷗􏷒unpack engine reposition struct􏷑
􏷐Used to pack the incoming J2 engine reposition struct.
From SimHost to Flight Model􏷏
􏶠specific packing for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜rm􏶝􏷆EngineRepositionT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_nRunning);
    J2_UNPACK_VAR(􏵶message􏵷->m_fPiston_rpm);
    J2_UNPACK_VAR(􏵶message􏵷->m_fN1_pct);
    J2_UNPACK_VAR(􏵶message􏵷->m_fN2_pct);
􏶳

􏷘-􏷗􏷒unpack propeller reposition struct􏷑
􏷐Used to pack the incoming J2 propeller reposition struct.
From SimHost to Flight Model􏷏
􏶠specific packing for version􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜rm􏶝􏷆PropellerRepositionT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_UNPACK_VAR(􏵶message􏵷->m_fPiston_rpm);
􏶳
















􏷘-􏷗􏷒message size matches header claim􏷑
􏷐verify the message size􏷏
􏶠check that the message size in the header matches the amount of data unpacked􏶡
􏶜􏶝􏷆J2MessageHeaderT􏷅􏷄header􏷃􏷀The unpacked header􏶿
􏶜􏶝􏷆int􏷅􏷄buffer size􏷃􏷀The state of the iterator after an unpack􏶿
􏶜􏶝􏷆char[]􏷅􏷄packet name􏷃􏷀A descriptive name for the packet.  Used for printing a descriptive error􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼sizes match􏶻􏶺whether or not the buffer size matches the size advertised in the header􏶹
􏶴
  􏶲A sanity check to see that their header indicates the correct size of the entire message􏶱
  if (􏵶header􏵷.m_uByteCount != 􏵶buffer size􏵷){
    fprintf(stderr, "J2 %s message size does not match what was indicated in the header. Expected: %i, but got: %u\n",􏵶packet name􏵷,􏵶buffer size􏵷,􏵶header􏵷.m_uByteCount);
    return 􏵰;
  }
  return 􏵱;
􏶳

􏷘-􏷗􏷒unpack header􏷑
􏷐Used to unpack the buffer header that comes before the payload.􏷏
􏶠returns the header which is a known size􏶡
􏶜􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜􏶝􏷆BOOL􏷅􏷄from flight model􏷃􏷀whether the header has come from the flight model􏶿
􏶚m􏶛􏶾J2MessageHeaderT􏶽􏶼header􏶻􏶺The header of the message􏶹
􏶴
    􏶲the header portion before the payload􏶱
    J2MessageHeaderT tHeader;
    short sSpecifiedSize;
    
    􏶲the starting unpack iterator of the buffer􏶱
    􏶲we start at 1, because we already know the message type􏶱
    size_t uByteIterator = 1;
    
    􏶲store the byte count to verify at the end of unpacking􏶱
    memcpy(&sSpecifiedSize,&􏵶buffer􏵷[uByteIterator],2);
    tHeader.m_uByteCount = sSpecifiedSize;
    
    􏶲the message version􏶱
    tHeader.m_ucMessageVersion = 􏵶buffer􏵷[uByteIterator];
    ++uByteIterator;
    
    􏶲conditionally unpack frame counter􏶱
    if (􏵶from flight model􏵷){
      UnpackBigEndian4ByteInvariance(􏵶buffer􏵷,&uByteIterator, &tHeader.m_uFrameCounter, sizeof(tHeader.m_uFrameCounter));
    }

    return tHeader;
􏶳