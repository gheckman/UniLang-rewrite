􏶞g􏶟
􏷲packs the relevant J2 messages􏷱
􏷰Based off version 2.4 of the ICD.
It would have been nice to automate the network packing/unpacking.
Or use compiler pragmas to stop padding, and make grabbing of struct chunks possible.

Message sent from Flight Model to Sim Host
+----------------+----------------+----------------+------------------+----------------+
|        0       |       1-2      |        3       |       4-7        |     4-4095     |
+----------------+----------------+----------------+------------------+
|  Message Type  |   Byte Count   |  Message Ver.  | Frame Counter    |     Payload    |
+----------------+----------------+----------------+------------------+----------------+
^                                                                     ^
+--------------------- HEADER ----------------------------------------+


Message sent from Sim Host to Flight Model
+----------------+----------------+----------------+----------------+
|        0       |       1-2      |        3       |     4-4095     |
+----------------+----------------+----------------+----------------+
|  Message Type  |   Byte Count   |  Message Ver.  |     Payload    |
+----------------+----------------+----------------+----------------+
^                                                  ^
+--------------------- HEADER ---------------------+

 - Message Packing (callable)
 - Header Packing (hidden)
 - Payload Packing (hidden)
􏷯
􏷮J2_Connection􏷭􏷮Network􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦J2MessageTypes.h􏷥􏷢USES: FlightModelMessageTypeE􏷡
􏷤􏷣􏷦SendToJ2Messages.h􏷥􏷢USES: SendHighSpeedMessageT, SendLowSpeedMessageT, SendRepositionMessageT, SendVersionRequestMessageT􏷡
􏷤􏷣􏷦ReceiveFromJ2Messages.h􏷥􏷢USES: RcvHighSpeedMessageT, RcvLowSpeedMessageT, RcvEngineDataMessageT, FlightModelEngineMessageT, FlightModelPropellerMessageT, RepositionMessageReplyT, VersionMessageReplyT􏷡
􏷤􏷣􏷦stddef.h􏷥􏷢USES: size_t􏷡
􏷤􏷣􏷦Defs.h􏷥􏷢USES: BYTE􏷡
􏶔􏶕􏶒PackUtilities.h􏶓􏶖USES: PackBigEndian4ByteInvariance(), PackFirstNArrayElements()􏶗
􏶔􏶕􏶒J2MessageHeader.h􏶓􏶖USES: J2MessageHeaderT􏶗
􏶔􏶕􏶒strLib.h􏶓􏶖USES: memcpy()􏶗
􏶔􏶕􏶒stdio.h􏶓􏶖USES: fprintf()􏶗

􏵺method for packing regular variables according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_PACK_VAR(X)􏵿􏵖􏵗􏵼PackBigEndian4ByteInvariance(pucBuffer, puBufferIterator, &X, sizeof(X))􏵽

􏵺method for fully packing arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_Pack_Full_Array(X)􏵿􏵖􏵗􏵼PackBigEndian4ByteInvariance(pucBuffer, puBufferIterator, X, sizeof(X))􏵽

􏵺method for partially packing arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_Pack_Partial_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PackFirstNArrayElements(pucBuffer, puBufferIterator, X, sizeof(X[0]), AMOUNT, MAX)􏵽

􏵺method for partially packing engine arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_PACK_PARTIAL_ENGINE_ARRAY(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyPackEngineArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially packing propeller arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_Pack_Partial_Propeller_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyPackPropellerArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially packing engine reposition arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_PACK_PARTIAL_ENGINE_REPOSITION_ARRAY(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyPackEngineRepositionArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏵺method for partially packing propeller reposition arrays according to J2 ICD􏵻
􏵸macro uses local local buffer data implicitly􏵹
􏵐-􏵑􏵾J2_Pack_Partial_Propeller_Reposition_Array(X,AMOUNT,MAX)􏵿􏵖􏵗􏵼PartiallyPackPropellerRepositionArray(pucBuffer, puBufferIterator, X, AMOUNT, MAX)􏵽

􏷘+􏷗􏷒pack j2 high speed send message􏷑
􏷐Used to fill buffer for sending J2 high speed messages.  
From SimHost to Flight Model􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆SendHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 4;
    􏵲pack j2 high speed send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_HIGH_SPEED);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 low speed send message􏷑
􏷐Used to fill buffer for sending J2 low speed messages.
From SimHost to Flight Model􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆SendLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 4;
    􏵲pack j2 low speed send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_LOW_SPEED);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 reposition send message􏷑
􏷐Used to fill buffer for sending J2 reposition messages.
From SimHost to Flight Model􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆SendRepositionMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 4;
    􏵲pack j2 reposition send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_REPOSITION);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 version request message􏷑
􏷐Used to fill buffer for sending J2 version request messages.
From SimHost to Flight Model􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆SendVersionRequestMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 4;
    􏵲pack j2 version send message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_VERSION);
    return uByteIterator;
􏶳





􏷘+􏷗􏷒pack j2 high speed received message􏷑
􏷐Used to fill buffer for sending J2 high speed message.
From Flight Model to SimHost􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆RcvHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 8;
    􏵲pack j2 high speed received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_J2_HIGH_SPEED);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 low speed received message􏷑
􏷐Used to fill buffer for sending J2 low speed message.
From Flight Model to SimHost􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆RcvLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 8;
    􏵲pack j2 low speed received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_J2_LOW_SPEED);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 engine received message􏷑
􏷐Used to fill buffer for sending J2 engine message.
From Flight Model to SimHost􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆RcvEngineDataMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 8;
    􏵲pack j2 engine received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_J2_ENGINE);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 reposition received message􏷑
􏷐Used to fill buffer for sending J2 reposition message.
From Flight Model to SimHost􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆RepositionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 8;
    􏵲pack j2 reposition received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_J2_REPOSITION_REPLY);
    return uByteIterator;
􏶳

􏷘+􏷗􏷒pack j2 version received message􏷑
􏷐Used to fill buffer for sending J2 version message.
From Flight Model to SimHost􏷏
􏶠Called before sending out a J2 Message.􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜r􏶝􏷆VersionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶚m􏶛􏶾size_t􏶽􏶼byte count􏶻􏶺The byte count of the filled buffer􏶹
􏶴
    size_t uByteIterator = 8;
    􏵲pack j2 version received message payload􏵳􏵶buffer􏵷,&uByteIterator,􏵶message􏵷);
    􏵲pack header􏵳􏵶buffer􏵷,uByteIterator,FLIGHT_MODEL_MESSAGE_TYPE_J2_VERSION);
    return uByteIterator;
􏶳





􏷘-􏷗􏷒pack j2 high speed send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific packing for high speed􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆SendHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
  J2_PACK_VAR(􏵶message􏵷->m_fPitchFlightControl);
  J2_PACK_VAR(􏵶message􏵷->m_fRollFlightControl);
  J2_PACK_VAR(􏵶message􏵷->m_fYawFlightControl);
  J2_PACK_VAR(􏵶message􏵷->m_fCollectiveFlightControl);
  J2_PACK_VAR(􏵶message􏵷->m_fPitchTrimPosition);
  J2_PACK_VAR(􏵶message􏵷->m_fRollTrimPosition);
  J2_PACK_VAR(􏵶message􏵷->m_fYawTrimPosition);
  J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfYawSerialActuators);
  J2_PACK_VAR(􏵶message􏵷->m_fYawTrimActuators);
  J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfRollSerialActuators);
  J2_PACK_VAR(􏵶message􏵷->m_fRollTrimActuators);
  J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfPitchSerialActuators);
  J2_PACK_VAR(􏵶message􏵷->m_fPitchTrimActuators);
  J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfCollectiveSerialActuators);
  J2_PACK_VAR(􏵶message􏵷->m_fCollectiveTrimActuators);
  J2_PACK_VAR(􏵶message􏵷->m_nYawControlOverrideFlag);
  J2_PACK_VAR(􏵶message􏵷->m_nPitchControlOverrideFlag);
  J2_PACK_VAR(􏵶message􏵷->m_nRollControlOverrideFlag);
  J2_PACK_VAR(􏵶message􏵷->m_nCollectiveControlOverrideFlag);
  J2_PACK_VAR(􏵶message􏵷->m_fRightBrakes);
  J2_PACK_VAR(􏵶message􏵷->m_fLeftBrakes);
  J2_PACK_VAR(􏵶message􏵷->m_fNoseWheelControl);
  J2_PACK_VAR(􏵶message􏵷->m_fRotorBrake);
  J2_PACK_VAR(􏵶message􏵷->m_nWinchFlag);
  J2_PACK_VAR(􏵶message􏵷->m_fWinchLength_m);
  J2_PACK_VAR(􏵶message􏵷->m_fWinchPayloadMass_kg);
  J2_PACK_VAR(􏵶message􏵷->m_fWinchPayloadX_m);
  J2_PACK_VAR(􏵶message􏵷->m_fWinchPayloadY_m);
  J2_PACK_VAR(􏵶message􏵷->m_fWinchPayloadZ_m);
  J2_PACK_VAR(􏵶message􏵷->m_nHookFlag);
  J2_PACK_VAR(􏵶message􏵷->m_fHookLength_m);
  J2_PACK_VAR(􏵶message􏵷->m_fHookPayloadMass_Kg);
  J2_PACK_VAR(􏵶message􏵷->m_fHookPayloadX_m);
  J2_PACK_VAR(􏵶message􏵷->m_fHookPayloadY_m);
  J2_PACK_VAR(􏵶message􏵷->m_fHookPayloadZ_m);
  J2_PACK_VAR(􏵶message􏵷->m_nSASMode);
  J2_PACK_VAR(􏵶message􏵷->m_fHeightOfTerrain_feet);
    
  􏶲contact point packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfContactPoints);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfGroundContactLocation_feet,􏵶message􏵷->m_nNumberOfContactPoints,NUM_CONTACT_LOCATION);
  
  􏶲engine related packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfThrottle,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfMixture,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  
  􏶲propeller packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfPropPitch_degrees,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
  
  􏶲fuel tank packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfTanks);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfFuelWeight_lbs,􏵶message􏵷->m_nNumberOfTanks,MAX_NUMBER_OF_FUEL_TANKS);
  
  J2_PACK_VAR(􏵶message􏵷->m_nFlag1);
􏶳

􏷘-􏷗􏷒pack j2 low speed send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific packing for low speed􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆SendLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
  􏶲gear related packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfGears);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnGearRequestedPosition_pct,􏵶message􏵷->m_nNumberOfGears,MAX_NUMBER_OF_LANDING_GEARS);
    
  􏶲flap related packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfFlaps);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnFlapRequestedPosition_pct,􏵶message􏵷->m_nNumberOfFlaps,MAX_NUMBER_OF_FLAPS);
    
  􏶲speed brake related packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfSpeedBrakes);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnSpeedBrakeRequestedPosition_pct,􏵶message􏵷->m_nNumberOfSpeedBrakes,MAX_NUMBER_OF_SPEED_BRAKES);
    
  J2_PACK_VAR(􏵶message􏵷->m_fSeaLevelPressure_inHg);
  J2_PACK_VAR(􏵶message􏵷->m_fSeaLevelTemperature_degf);
  J2_PACK_VAR(􏵶message􏵷->m_fRunwayRoughness);
  J2_PACK_VAR(􏵶message􏵷->m_fWindMagnitude_kts);
  J2_PACK_VAR(􏵶message􏵷->m_fWindHeading_deg);
  J2_PACK_VAR(􏵶message􏵷->m_fWindInclination_deg);
  J2_PACK_VAR(􏵶message􏵷->m_fTurbulence);
  J2_PACK_VAR(􏵶message􏵷->m_fPayloadWeight_lbs);
  J2_PACK_VAR(􏵶message􏵷->m_fCGOffsetX_in);
  J2_PACK_VAR(􏵶message􏵷->m_fCGOffsetY_in);
  J2_PACK_VAR(􏵶message􏵷->m_fCGOffsetZ_in);
    
  􏶲engine related packing􏶱
  J2_PACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineStarterRunning,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnBleedAir,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnIgnitionOn,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineFlags1,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pnEngineInletState,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_fIceStatesEngine_in,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_nEngineFailureFlags,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
  J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfIceStatesProp_in,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);
    
    
  J2_PACK_VAR(􏵶message􏵷->m_fIceStateRightWing_in);
  J2_PACK_VAR(􏵶message􏵷->m_fIceStateLeftWing_in);
  J2_PACK_VAR(􏵶message􏵷->m_fIceStateFuselage_in);
  J2_PACK_VAR(􏵶message􏵷->m_fIceStateTail_in);
  J2_PACK_VAR(􏵶message􏵷->m_nTimeMultiplier);
  J2_PACK_VAR(􏵶message􏵷->m_nFailureFlags1);
􏶳

􏷘-􏷗􏷒pack j2 reposition send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific packing for reposition􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆SendRepositionMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_nRepositionType);
    J2_PACK_VAR(􏵶message􏵷->m_dLatitude_deg);
    J2_PACK_VAR(􏵶message􏵷->m_dLongitude_deg);
    J2_PACK_VAR(􏵶message􏵷->m_dMSLAltitude_ft);
    J2_PACK_VAR(􏵶message􏵷->m_fMagneticHeading_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fIndicatedAirspeed_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fAircraftPitch_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fAircraftRoll_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fVerticalSpeed_ft_m);

    􏶲engine related packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
    J2_PACK_PARTIAL_ENGINE_REPOSITION_ARRAY(􏵶message􏵷->m_ptEngineReposition,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);

    􏶲propeller related packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
    J2_PACK_PARTIAL_PROPELLER_REPOSITION_ARRAY(􏵶message􏵷->m_ptPropellerReposition,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
    
    J2_PACK_VAR(􏵶message􏵷->m_fPitchFlightControl);
    J2_PACK_VAR(􏵶message􏵷->m_fRollFlightControl);
    J2_PACK_VAR(􏵶message􏵷->m_fYawFlightControl);
    J2_PACK_VAR(􏵶message􏵷->m_fCollectiveFlightControl);
􏶳

􏷘-􏷗􏷒pack j2 version send message payload􏷑
􏷐pack the relevant data into the buffer
From SimHost to Flight Model􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆SendVersionRequestMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    //payload is empty
􏶳




􏷘-􏷗􏷒pack j2 high speed received message payload􏷑
􏷐Used to pack the outgoing J2 high speed payload.
From Flight Model to SimHost􏷏
􏶠specific packing for high speed􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆RcvHighSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_dLatitude_deg);
    J2_PACK_VAR(􏵶message􏵷->m_dLongitude_deg);
    J2_PACK_VAR(􏵶message􏵷->m_dMSLAltitude_ft);
    J2_PACK_VAR(􏵶message􏵷->m_fTheta_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fPsi_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fBeta_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fPhi_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fAlpha_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fSlip_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fAngleOfAttack);
    J2_PACK_VAR(􏵶message􏵷->m_fVelocityX_mps);
    J2_PACK_VAR(􏵶message􏵷->m_fVelocityY_mps);
    J2_PACK_VAR(􏵶message􏵷->m_fVelocityZ_mps);
    J2_PACK_VAR(􏵶message􏵷->m_fAccelX_mpss);
    J2_PACK_VAR(􏵶message􏵷->m_fAccelY_mpss);
    J2_PACK_VAR(􏵶message􏵷->m_fAccelZ_mpss);
    J2_PACK_VAR(􏵶message􏵷->m_fPitchRate_dps);
    J2_PACK_VAR(􏵶message􏵷->m_fRollRate_dps);
    J2_PACK_VAR(􏵶message􏵷->m_fYawRate_dps);
    J2_PACK_VAR(􏵶message􏵷->m_fPitchAccel_dpss);
    J2_PACK_VAR(􏵶message􏵷->m_fRollAccel_dpss);
    J2_PACK_VAR(􏵶message􏵷->m_fYawAccel_dpss);
    J2_PACK_VAR(􏵶message􏵷->m_fTrueAirspeedLong_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fTrueAirspeedLat_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fTrueAirspeedVert_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fGroundSpeed_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fVerticalSpeed_fpm);
    J2_PACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedLong_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedLat_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fIndicatedAirspeedVert_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fMachNumber);
    J2_PACK_VAR(􏵶message􏵷->m_fNorthVelocity_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fEastVelocity_kts);
    J2_PACK_VAR(􏵶message􏵷->m_fDynamicPressure_Pa);
    J2_PACK_VAR(􏵶message􏵷->m_fMagneticHeading_deg);
    
    
    􏶲landing gear packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfLandingGears);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfWeightOnLandingGear_lbs,􏵶message􏵷->m_nNumberOfLandingGears,MAX_NUMBER_OF_LANDING_GEARS);
    
    
    J2_PACK_VAR(􏵶message􏵷->m_nFlag1);
    J2_PACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetX_m);
    J2_PACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetY_m);
    J2_PACK_VAR(􏵶message􏵷->m_fPilotSeatCgOffsetZ_m);
    J2_PACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetX_m);
    J2_PACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetY_m);
    J2_PACK_VAR(􏵶message􏵷->m_fCoPilotSeatCgOffsetZ_m);
    J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfYawSerialActuators);
    J2_PACK_VAR(􏵶message􏵷->m_fYawTrimActuators);
    J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfRollSerialActuators);
    J2_PACK_VAR(􏵶message􏵷->m_fRollTrimActuators);
    J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfPitchSerialActuators);
    J2_PACK_VAR(􏵶message􏵷->m_fPitchTrimActuators);
    J2_PACK_FULL_ARRAY(􏵶message􏵷->m_pfCollectiveSerialActuators);
    J2_PACK_VAR(􏵶message􏵷->m_fCollectiveTrimActuators);
    
    􏶲surface packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfSurfaces);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceQ,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceAngleOfIncidence,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSurfaceTorque,􏵶message􏵷->m_nNumberOfSurfaces,MAX_NUMBER_OF_SURFACES);
    
    J2_PACK_VAR(􏵶message􏵷->m_fBuffetMagnitude);
    
    􏶲spare bucket packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nSpareBucketSize);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_pfSpareBucket,􏵶message􏵷->m_nSpareBucketSize,MAX_SPARE_BUCKET_SIZE);
􏶳

􏷘-􏷗􏷒pack j2 low speed received message payload􏷑
􏷐Used to pack the outgoing J2 low speed payload.
From Flight Model to SimHost􏷏
􏶠specific packing for low speed􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆RcvLowSpeedMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fOutsideAirTemperature_degf);
    J2_PACK_VAR(􏵶message􏵷->m_fOutsideAirPressure_inHg);
    J2_PACK_VAR(􏵶message􏵷->m_fNoseWheelPosition_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fMagneticVariation_deg);
􏶳

􏷘-􏷗􏷒pack j2 engine received message payload􏷑
􏷐Used to pack the outgoing J2 engine payload.
From Flight Model to SimHost􏷏
􏶠specific packing for engine􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆RcvEngineDataMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    size_t uIndex = 0;
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfEngines);
    J2_PACK_PARTIAL_ENGINE_ARRAY(􏵶message􏵷->m_ptEngine,􏵶message􏵷->m_nNumberOfEngines,MAX_NUMBER_OF_ENGINES);

    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfPropellers);
    J2_PACK_PARTIAL_PROPELLER_ARRAY(􏵶message􏵷->m_ptPropeller,􏵶message􏵷->m_nNumberOfPropellers,MAX_NUMBER_OF_PROPELLERS);
􏶳

􏷘-􏷗􏷒pack j2 reposition received message payload􏷑
􏷐Used to pack the outgoing J2 reposition payload.
From Flight Model to SimHost􏷏
􏶠specific packing for reposition􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆RepositionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fYawControlPosition);
    J2_PACK_VAR(􏵶message􏵷->m_fThrottlePosition);
    J2_PACK_VAR(􏵶message􏵷->m_fLateralControlPosition);
    J2_PACK_VAR(􏵶message􏵷->m_fLongitudinalControlPosition);
􏶳

􏷘-􏷗􏷒pack j2 version received message payload􏷑
􏷐Used to pack the outgoing J2 version request payload.
From Flight Model to SimHost􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆VersionMessageReplyT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fJ2Version);
    J2_PACK_VAR(􏵶message􏵷->m_fAircraftModel);
    
    􏶲dev item packing􏶱
    J2_PACK_VAR(􏵶message􏵷->m_nNumberOfDeveloperItems);
    J2_PACK_PARTIAL_ARRAY(􏵶message􏵷->m_szDevItem,􏵶message􏵷->m_nNumberOfDeveloperItems,MAX_DEV_ITEMS);
􏶳



􏷘-􏷗􏷒partially pack engine array􏷑
􏷐Used to partially pack the outgoing J2 engine array.
From Flight Model to SimHost􏷏
􏶠specific packing for engine struct􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜􏶝􏷆FlightModelEngineMessageT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲pack engine struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳

􏷘-􏷗􏷒partially pack propeller array􏷑
􏷐Used to partially pack the outgoing J2 propeller array.
From Flight Model to SimHost􏷏
􏶠specific packing for propeller struct􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜􏶝􏷆FlightModelPropellerMessageT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲pack propeller struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳



􏷘-􏷗􏷒pack engine struct􏷑
􏷐Used to pack the outgoing J2 engine struct.
From Flight Model to SimHost􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆FlightModelEngineMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fN1_pct);
    J2_PACK_VAR(􏵶message􏵷->m_fN2_pct);
    J2_PACK_VAR(􏵶message􏵷->m_fTorque_ftlbs);
    J2_PACK_VAR(􏵶message􏵷->m_fFuelFlow_pph);
    J2_PACK_VAR(􏵶message􏵷->m_fOilTemperature_degf);
    J2_PACK_VAR(􏵶message􏵷->m_fOilPressure_psi);
    J2_PACK_VAR(􏵶message􏵷->m_fExhaustGasTemperature_degf);
    J2_PACK_VAR(􏵶message􏵷->m_fCylinderHeadTemperature_degf);
    J2_PACK_VAR(􏵶message􏵷->m_fEngineRPM);
    J2_PACK_VAR(􏵶message􏵷->m_fEngineThrust_lbs);
    J2_PACK_VAR(􏵶message􏵷->m_fManifoldPressure_inHg);
    J2_PACK_VAR(􏵶message􏵷->m_fInletTurbineTemperature_degc);
    J2_PACK_VAR(􏵶message􏵷->m_fBleedAirPressureGenerated_psi);
􏶳

􏷘-􏷗􏷒pack propeller struct􏷑
􏷐Used to pack the outgoing J2 propeller struct.
From Flight Model to SimHost􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆FlightModelPropellerMessageT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fPropRPM);
    J2_PACK_VAR(􏵶message􏵷->m_fPropPitch_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fMastMomentDirection_deg);
    J2_PACK_VAR(􏵶message􏵷->m_fMastMomentForce_Nm);
􏶳








􏷘-􏷗􏷒partially pack engine reposition array􏷑
􏷐Used to partially pack the incoming J2 engine reposition array.
From SimHost to Flight Model􏷏
􏶠specific unpacking for engine reposition struct􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜􏶝􏷆EngineRepositionT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲pack engine reposition struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳

􏷘-􏷗􏷒partially pack propeller reposition array􏷑
􏷐Used to partially pack the incoming J2 propeller reposition array.
From SimHost to Flight Model􏷏
􏶠specific unpacking for propeller reposition struct􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start unpacking the data at􏶿
􏶜􏶝􏷆PropellerRepositionT[]􏷅􏷄message􏷃􏷀the array to be packed􏶿
􏶜􏶝􏷆size_t􏷅􏷄number of elements􏷃􏷀the number of elements to pack from the start of the array􏶿
􏶜􏶝􏷆size_t􏷅􏷄array size􏷃􏷀the maximum size of the array􏶿
􏶴
    size_t uIndex = 0;
    for(; uIndex < 􏵶number of elements􏵷 && uIndex < 􏵶array size􏵷; ++uIndex){
        􏵲pack propeller reposition struct􏵳􏵶buffer􏵷,􏵶buffer iterator􏵷,&􏵶message􏵷[uIndex]);
    }
􏶳

􏷘-􏷗􏷒pack engine reposition struct􏷑
􏷐Used to pack the outgoing J2 engine reposition struct.
From SimHost to Flight Model􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆EngineRepositionT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_nRunning);
    J2_PACK_VAR(􏵶message􏵷->m_fPiston_rpm);
    J2_PACK_VAR(􏵶message􏵷->m_fN1_pct);
    J2_PACK_VAR(􏵶message􏵷->m_fN2_pct);
􏶳

􏷘-􏷗􏷒pack propeller reposition struct􏷑
􏷐Used to pack the outgoing J2 propeller reposition struct.
From SimHost to Flight Model􏷏
􏶠specific packing for version􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message from􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜r􏶝􏷆PropellerRepositionT􏷅􏷄message􏷃􏷀The message to pack􏶿
􏶴
    J2_PACK_VAR(􏵶message􏵷->m_fPiston_rpm);
􏶳


















􏷘-􏷗􏷒pack header􏷑
􏷐Used to fill the buffer header that comes before the payload.􏷏
􏶠The byte count portion is filled based on the iterated payload􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄buffer􏷃􏷀The data buffer to pack the message in􏶿
􏶜m􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start packing the data at􏶿
􏶜􏶝􏷆FlightModelMessageTypeE􏷅􏷄message type􏷃􏷀The message to pack􏶿
􏶴
    􏶲the header of the message is 4 bytes􏶱
    
    􏶲the first byte is the message type􏶱
    BYTE pucHeader[4];
    size_t uIndex = 0;
    short sSpecifiedSize = 0;
    unsigned int uFrameCounter = 123;
    switch (􏵶message type􏵷){
        case FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_HIGH_SPEED: pucHeader[0] = 1; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_LOW_SPEED: pucHeader[0] = 2; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_REPOSITION: pucHeader[0] = 3; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_SIMHOST_VERSION: pucHeader[0] = 4; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_J2_HIGH_SPEED: pucHeader[0] = 1; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_J2_LOW_SPEED: pucHeader[0] = 2; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_J2_ENGINE: pucHeader[0] = 3; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_J2_REPOSITION_REPLY: pucHeader[0] = 4; break;
        case FLIGHT_MODEL_MESSAGE_TYPE_J2_VERSION: pucHeader[0] = 5; break;
        default: fprintf(stderr,"invalid message type requested for J2 header");
    }
    
    􏶲the next two bytes are the total byte count􏶱
    􏶲(this gets derived from filling the payload + an extra 4 bytes for the header itself)􏶱
    uIndex=1;
    sSpecifiedSize = (short)􏵶buffer iterator􏵷;
    PackBigEndian4ByteInvariance(pucHeader,&uIndex,&sSpecifiedSize,sizeof(short));
    
    􏶲the last byte is the version number􏶱
    pucHeader[3] = 1;
    uIndex = 0;
    PackBigEndian4ByteInvariance(􏵶buffer􏵷,&uIndex,pucHeader,sizeof(pucHeader));
    
    􏶲conditionally pack frame counter􏶱
    􏶲we only pack the frame counter if the message type is from J2􏶱
    switch (􏵶message type􏵷){
      case FLIGHT_MODEL_MESSAGE_TYPE_J2_HIGH_SPEED:
      case FLIGHT_MODEL_MESSAGE_TYPE_J2_LOW_SPEED:
      case FLIGHT_MODEL_MESSAGE_TYPE_J2_ENGINE:
      case FLIGHT_MODEL_MESSAGE_TYPE_J2_REPOSITION_REPLY:
      case FLIGHT_MODEL_MESSAGE_TYPE_J2_VERSION:
      PackBigEndian4ByteInvariance(􏵶buffer􏵷,&uIndex, &uFrameCounter, sizeof(uFrameCounter)); break;
      default:;
    }
    
􏶳

