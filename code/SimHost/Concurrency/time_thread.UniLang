􏶞global􏶟
􏷲The entry point to running the time thread.􏷱
􏷰The time thread is responsible for updating the time system at high priority.􏷯
􏷮Concurrency􏷭 􏷮Time􏷭
􏷬Trevor Hickey􏷫
􏷤TimeManager􏷣􏷢USES: TimeManagerT􏷡
􏷤TimeUtilities􏷣􏷢USES: DelayTaskNumberOfMilliseconds()􏷡

􏶨how long to delay the update of the time manager.􏶧
􏶘-􏶙􏶰cs􏶯􏶮unsigned int􏶭􏶬task delay amount ms􏶫􏶪10􏶩

􏷘+􏷗􏷒time thread entry point􏷑
􏷐Continuously update time related data for the rest of the systems.􏷏
􏶠A function that runs in an infinite loop, at the fastest update rate, to keep other systems
(both hardware and software) in sync with one another.􏶡
􏶾int􏶽􏶼status􏶻􏶺A status value that is specified by the Task API.
This function will not return, and thus it is only here to meet the needs of the API.􏶹
􏶴
􏶲set the global singleton to a valid starting state􏶱
InitializeTimeSystem();

􏶲continuously update the time data for other systems to use􏶱
while (1)
{
    
    􏶲update the state of the global singleton􏶱
    􏶲this reads and writes with Ownship􏶱
    UpdateTimeSystem();

    􏶲Delay the task a certain number of milliseconds􏶱
    DelayTaskNumberOfMilliseconds(TASK_DELAY_AMOUNT_MS);
}
􏶳
