􏶞o􏶟
􏷲A basic generic vector type for adding and accessing a dynamic number of elements.􏷱
􏷰The capacity of the vector is equal to its size.
Be sure to type cast the void* returned when accessing.
This is a typical practice of void pointers.􏷯
􏷮Vector􏷭 􏷮Data Structure􏷭
􏷬Trevor Hickey􏷫


􏷤􏷣􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷤􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏶔s􏶕􏶒stdlib.h􏶓􏶖USES: malloc(), realloc(), free(), sizeof()􏶗
􏶔s􏶕􏶒strLib.h􏶓􏶖USES: memcpy()􏶗

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be set to an empty state with a size of 0􏶡
􏶜c􏶝􏷆size_t􏷅􏷄type size􏷃􏷀the size of the types that will be held in the homogeneous container.􏶿
􏶜c􏶝􏷆size_t􏷅􏷄initial capacity􏷃􏷀pre allocate a certain number of elements upon initialization.􏶿
􏶴
􏶲start as an empty vector􏶱
􏵴size􏵵 = 0;

􏶲store the size of each element.  (Such a byte count will  become underivable through void*)􏶱
􏵴type size􏵵 = 􏵶type size􏵷;

􏶲start with a capacity of 1 for the initial allocation􏶱
􏶲1 is arbitary.  It assumes that someone will at least add 1 element and allocates that memory upfront.􏶱
􏵴capacity􏵵 = 􏵶initial capacity􏵷;

􏶲initialze the internal dynamic array.􏶱
􏶲this array starts with an initial capacity, and will grow as more elements are added􏶱
􏵴elements􏵵 = malloc(sizeof(void *) * 􏵴capacity􏵵);
􏶳

􏷘+􏷗􏷒add􏷑
􏷐Adds an element to the end of the 􏶐􏷏
􏶠Potentially increases the capacity if more room is needed.  Increases the size.
The added item will be the last item.􏶡
􏶜􏶝􏷆void*􏷅􏷄new element􏷃􏷀the new capacity to resize the internal array to.􏶿
􏶴
    
    􏶲adjust the allocation space if needed,􏶱
    􏶲and if there is enough room, add the new element􏶱
    if (􏵲ensure there is enough space􏵳)){
        
        􏶲adds the new element􏶱
        􏵴elements􏵵[􏵴size􏵵] = malloc(􏵴type size􏵵);
        memcpy(􏵴elements􏵵[􏵴size􏵵],􏵶new element􏵷,􏵴type size􏵵);
        
        􏶲increase our size now that the insertion is complete.􏶱
        ++􏵴size􏵵;
    }
􏶳

􏷘-􏷗􏷒ensure there is enough space􏷑
􏷐ensure there is enough space, by possibly resizing the internal array.􏷏
􏶠if resizing the array is needed, but it cannot be preformed, FALSE is returned.􏶡
􏶚􏶛􏶾BOOL􏶽􏶼available space􏶻􏶺whether there is enough space to add an item􏶹
􏶴
    􏶲whether there is enough space to add an item􏶱
    BOOL bAvailableSpace = TRUE;
    
    􏶲increase the size of the internal array if we are already full􏶱
    if (􏵴size􏵵 == 􏵴capacity􏵵){
        
        􏶲double capacity when allocating more space􏶱
        bAvailableSpace = 􏵲resize􏵳􏵲determine resize amount􏵳));
    }
    
    return bAvailableSpace;
􏶳

􏷘-􏷗􏷒determine resize amount􏷑
􏷐determines the rate at which to resize the vector􏷏
􏶠handles any changes where capacities 0 and up􏶡
􏶚􏶛􏶾size_t􏶽􏶼new capacity􏶻􏶺the new cpacity amount for resizing􏶹
􏶴
    􏶲handle edge case of 0 capacity􏶱
    if (􏵴capacity􏵵 == 0){
        return 1;
    }
    
    􏶲double capacity when allocating more space􏶱
    return 􏵴capacity􏵵 * 2;
􏶳

􏷘+􏷗􏷒get􏷑
􏷐Get an element at a particular index􏷏
􏶠If an invalid index is given, NULL is returned􏶡
􏶜c􏶝􏷆size_t􏷅􏷄index􏷃􏷀the index of the item to get􏶿
􏶚􏶛􏶾void*􏶽􏶼selected element􏶻􏶺the selected element of the 􏶐 from the given index􏶹
􏶴

􏶲if the index is valid, return it.􏶱
if (􏵲valid index􏵳􏵶index􏵷)){
    return 􏵴elements􏵵[􏵶index􏵷];
}

􏶲if the index is NOT valid, return NULL.􏶱
return NULL;
􏶳

􏷘-􏷗􏷒resize􏷑
􏷐Resize the internal array.􏷏
􏶠This is done when new space is needed for a newly inserted element.􏶡
􏶜c􏶝􏷆size_t􏷅􏷄new capacity􏷃􏷀the new capacity to resize the internal array to.􏶿
􏶚􏶛􏶾BOOL􏶽􏶼successful reallocation􏶻􏶺whether memory was successfully reallocated􏶹
􏶴

    􏶲whether memory was successfully reallocated􏶱
    BOOL bSuccessfulRealloc = TRUE;
    
    􏶲Change the size of the internal array (most likely increasing it).􏶱
    void** NewElements = realloc(􏵴elements􏵵, sizeof(void *) * 􏵶new capacity􏵷);
    
    􏶲Ensure the allocation was successful before applying it.􏶱
    if (NewElements){
        􏵴elements􏵵 = NewElements;
        􏵴capacity􏵵 = 􏵶new capacity􏵷;
        bSuccessfulRealloc = TRUE;
    }else{
        bSuccessfulRealloc = FALSE;
    }
    
    return bSuccessfulRealloc;
􏶳

􏷘-􏷗􏷒valid index􏷑
􏷐Check if an integer is a valid index􏷏
􏶠True is returned if the index is an addressable element in the vector.
False is returned if it is an out of range index􏶡
􏶜c􏶝􏷆size_t􏷅􏷄index􏷃􏷀the index to test for validity of􏶿
􏶚􏶛􏶾BOOL􏶽􏶼is valid index􏶻􏶺whether the index is valid for the current state of the 􏶐􏶹
􏶴
    􏶲Ensure the index is in range􏶱
    return 􏵶index􏵷 >= 0 && 􏵶index􏵷 < 􏵴size􏵵;
􏶳

􏷘+􏷗􏷒remove􏷑
􏷐removes an element at a particular index􏷏
􏶠If an invalid index is given, NULL is returned􏶡
􏶜c􏶝􏷆size_t􏷅􏷄index􏷃􏷀the index of the item to remove􏶿
􏶴
    􏶲only attempt to remove the item if it is at a valid index􏶱
    if (􏵲valid index􏵳􏵶index􏵷)){
    
        􏶲free the element at the specified index􏶱
        free(􏵴elements􏵵[􏵶index􏵷]);
        
        􏶲starting at the deleted index, iterate over each element and point them to their greater indexed neighbor.􏶱
        􏶲this will continue until we reach the last element which we will ignore (no need to set it to NULL)􏶱
        􏶲this effectively shifts all the elements down an index from the deletion point.􏶱
        􏶲afterward, we decrement the size, making the last element unaccessible.􏶱
        􏵲shift elements from deleted index􏵳􏵶index􏵷);

        􏶲decrement the size􏶱
        --􏵴size􏵵;
        
    }
􏶳

􏷘-􏷗􏷒shift elements from deleted index􏷑
􏷐shifts all elements down from an index that is assumed to be deleted.􏷏
􏶠this is done through pointer swapping of neighboring elements􏶡
􏶜c􏶝􏷆size_t􏷅􏷄deleted index􏷃􏷀the index that represents the deleted element.  Everything to the right, needs shifted one element to the left.􏶿
􏶴
    􏶲shift each element one by one starting at the deletion point􏶱
    􏶲forget about the last element􏶱
    size_t unIndex=􏵶deleted index􏵷;
    for (;unIndex < 􏵴size􏵵-1; ++unIndex){
        􏵴elements􏵵[unIndex] = 􏵴elements􏵵[unIndex+1];
    }
􏶳

􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐􏷏
􏶠This function must be called to free the internal allocated memory before 􏶐 goes out of scope.􏶡
􏶴
    􏶲clear all of the dynamic memory from the internal array􏶱
    􏶲after this call, 􏶐 can safely fall out of scope.􏶱
    
    􏶲loop over and delete each element pointed to by the void ptrs􏶱
    size_t unIndex=0;
    for (;unIndex < 􏵴size􏵵; ++unIndex){
        free(􏵴elements􏵵[unIndex]);
    }
    
    􏶲then delete the actual void* array􏶱
    free(􏵴elements􏵵);
    
    􏶲I think this is why c++ has the delete[] as a short hand􏶱
􏶳

􏶨the number of elements currently in the 􏶐􏶧
􏶦This can be used for iteration of the elements.
There is no hard limit on the size.  The internal array will grow to accommodate for new inserted elements.􏶥
􏶌observe􏶑􏶘-􏶙􏶮size_t􏶭􏶬size􏶫􏶪0􏶩

􏶨the amount of space allocated for the internal array􏶧
􏶦different implementations do different initial capacity, and have the capacity grow at different rates.
We will increase the capacity by *2 every time we need to add a new element to a full array.􏶥
􏶌observe􏶑􏶘-􏶙􏶮size_t􏶭􏶬capacity􏶫􏶪1􏶩

􏶨the internal array for all of our generic elements􏶧
􏶦when accessing an element, you will need to type cast to the appropriate pointer type before dereferencing􏶥
􏶘-􏶙􏶮void**􏶭􏶬elements􏶫􏶪0􏶩

􏶨the size of each element in the homogeneous container.􏶧
􏶦this is important to know, as acquiring a value upon insertion is done through void pointers as a means of generality.􏶥
􏶘-􏶙􏶮size_t􏶭􏶬type size􏶫􏶪0􏶩