􏶞g􏶟
􏷲constraint utilities􏷱
􏷰used for checking constraints on various sets of data􏷯
􏷮Constraint Utilities􏷭􏷮Utilities􏷭
􏷬Trevor Hickey􏷫
􏷤s􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏶔􏶕􏶒MathUtilities􏶓􏶖USES: ApproximatelyEqualF(), ApproximatelyGreaterEqualF(), ApproximatelyLessEqualF(), BetweenClosedInterval(), BetweenOpenInterval()􏶗

􏶊enumerated set of comparison operators􏶉
􏶈an alternative C solution for the unavailable std function objects
http://en.cppreference.com/w/cpp/utility/functional􏶇
􏶀comparison operator􏶋
􏶆equal to􏶅􏶂==􏶁
􏶆not equal to􏶅􏶂!=􏶁
􏶆greater􏶅􏶂>􏶁
􏶆less􏶅􏶂<􏶁
􏶆greater equal􏶅􏶂>=􏶁
􏶆less equal􏶅􏶂<=􏶁

􏶊enumerated set for interval types􏶉
􏶈used for checking that values are within a specified interval type􏶇
􏶀interval type􏶋
􏶆open􏶅􏶂(x,y) intervals􏶁
􏶆closed􏶅􏶂[x,y] intervals􏶁

􏷘+􏷗􏷒check value constraint􏷑
􏷐checks a runtime constraint on the value of a data member􏷏
􏶠used for debugging and testing various assertions􏶡
􏶜􏶝􏷆float􏷅􏷄lhs􏷃􏷀the value to test a constraint on􏶿
􏶜􏶝􏷆ComparisonOperatorE􏷅􏷄operator􏷃􏷀the comparison operator used on the value constraint􏶿
􏶜􏶝􏷆float􏷅􏷄rhs􏷃􏷀the value used to constrain the tested value􏶿
􏶜􏶝􏷆char[]􏷅􏷄var name􏷃􏷀string representation of the variable being tested􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄fail􏷃􏷀set to false if the constraint fails􏶿
􏶴
    􏶲test whether the expression passes based on the comparison􏶱
    BOOL bPassed = 􏵲test constraint􏵳􏵶lhs􏵷,􏵶operator􏵷,􏵶rhs􏵷);
    
    􏶲if the constraint failed􏶱
    if (!bPassed){
    
        􏶲print an error􏶱
        􏵲print constraint error􏵳􏵶lhs􏵷,􏵶operator􏵷,􏵶rhs􏵷,􏵶var name􏵷);
        
        􏶲signal failure to the caller􏶱
        *􏵶fail􏵷 = 􏵰;
    }
􏶳

􏷘+􏷗􏷒check interval constraint􏷑
􏷐checks a runtime constraint on the value of a data member􏷏
􏶠used for debugging and testing various assertions􏶡
􏶜􏶝􏷆float􏷅􏷄value􏷃􏷀the value to test against an interval􏶿
􏶜􏶝􏷆float􏷅􏷄begin􏷃􏷀begin portion of interval􏶿
􏶜􏶝􏷆float􏷅􏷄end􏷃􏷀end portion of interval􏶿
􏶜􏶝􏷆IntervalTypeE􏷅􏷄interval type􏷃􏷀the type of interval to test against􏶿
􏶜􏶝􏷆char[]􏷅􏷄var name􏷃􏷀string representation of the variable being tested􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄fail􏷃􏷀set to false if the constraint fails􏶿
􏶴
    􏶲test whether the expression passes based on the interval􏶱
    BOOL bPassed = 􏵲test interval􏵳􏵶value􏵷,􏵶begin􏵷,􏵶end􏵷,􏵶interval type􏵷);
    
    􏶲if the constraint failed􏶱
    if (!bPassed){
    
        􏶲print an error􏶱
        􏵲print interval error􏵳􏵶value􏵷,􏵶begin􏵷,􏵶end􏵷,􏵶interval type􏵷,􏵶var name􏵷);
    
        􏶲signal failure to the caller􏶱
        *􏵶fail􏵷 = 􏵰;
    }
􏶳

􏷘-􏷗􏷒test constraint􏷑
􏷐test a constraint based on a comparison􏷏
􏶠􏶡
􏶜􏶝􏷆float􏷅􏷄lhs􏷃􏷀the value to test a constraint on􏶿
􏶜􏶝􏷆ComparisonOperatorE􏷅􏷄operator􏷃􏷀the comparison operator used on the value constraint􏶿
􏶜􏶝􏷆float􏷅􏷄rhs􏷃􏷀the value used to constrain the tested value􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼passed􏶻􏶺whether the constraint passes or not􏶹
􏶴
    switch(􏵶operator􏵷){
        case COMPARISON_OPERATOR_EQUAL_TO:          return ApproximatelyEqualF(􏵶lhs􏵷,􏵶rhs􏵷);
        case COMPARISON_OPERATOR_NOT_EQUAL_TO:      return (􏵶lhs􏵷 != 􏵶rhs􏵷);
        case COMPARISON_OPERATOR_GREATER:           return (􏵶lhs􏵷 > 􏵶rhs􏵷); 
        case COMPARISON_OPERATOR_LESS:              return (􏵶lhs􏵷 < 􏵶rhs􏵷); 
        case COMPARISON_OPERATOR_GREATER_EQUAL:     return ApproximatelyGreaterEqualF(􏵶lhs􏵷,􏵶rhs􏵷);
        case COMPARISON_OPERATOR_LESS_EQUAL:        return ApproximatelyLessEqualF(􏵶lhs􏵷,􏵶rhs􏵷);
        default:;
    }
    
    return 􏵰;
􏶳

􏷘-􏷗􏷒test interval􏷑
􏷐test a constraint based on an interval􏷏
􏶠􏶡
􏶜􏶝􏷆float􏷅􏷄value􏷃􏷀the value to test against an interval􏶿
􏶜􏶝􏷆float􏷅􏷄begin􏷃􏷀begin portion of interval􏶿
􏶜􏶝􏷆float􏷅􏷄end􏷃􏷀end portion of interval􏶿
􏶜􏶝􏷆IntervalTypeE􏷅􏷄interval type􏷃􏷀the type of interval to test against􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼passed􏶻􏶺whether the constraint passes or not􏶹
􏶴
    switch(􏵶interval type􏵷){
        case INTERVAL_TYPE_OPEN:   return BetweenOpenInterval(􏵶value􏵷,􏵶begin􏵷,􏵶end􏵷);
        case INTERVAL_TYPE_CLOSED: return BetweenClosedInterval(􏵶value􏵷,􏵶begin􏵷,􏵶end􏵷);
        default:;
    }
    return 􏵰;
􏶳





􏷘-􏷗􏷒print constraint error􏷑
􏷐prints in error assuming the constraint failed􏷏
􏶠􏶡
􏶜􏶝􏷆float􏷅􏷄lhs􏷃􏷀the value to test a constraint on􏶿
􏶜􏶝􏷆ComparisonOperatorE􏷅􏷄operator􏷃􏷀the comparison operator used on the value constraint􏶿
􏶜􏶝􏷆float􏷅􏷄rhs􏷃􏷀the value used to constrain the tested value􏶿
􏶜􏶝􏷆char[]􏷅􏷄var name􏷃􏷀string representation of the variable being tested􏶿
􏶴
    fprintf(stderr, "%s fails constraint (", 􏵶var name􏵷);
    􏵲print operator􏵳􏵶operator􏵷);
    fprintf(stderr, " %f) with value %f\n",􏵶rhs􏵷,􏵶lhs􏵷);
􏶳

􏷘-􏷗􏷒print interval error􏷑
􏷐prints in error assuming the constraint failed􏷏
􏶠􏶡
􏶜􏶝􏷆float􏷅􏷄value􏷃􏷀the value to test against an interval􏶿
􏶜􏶝􏷆float􏷅􏷄begin􏷃􏷀begin portion of interval􏶿
􏶜􏶝􏷆float􏷅􏷄end􏷃􏷀end portion of interval􏶿
􏶜􏶝􏷆IntervalTypeE􏷅􏷄interval type􏷃􏷀the type of interval to test against􏶿
􏶜􏶝􏷆char[]􏷅􏷄var name􏷃􏷀string representation of the variable being tested􏶿
􏶴
    fprintf(stderr, "%s is not in the interval %c%f, %f%c with value %f\n",
    􏵶var name􏵷,􏵲get begin interval􏵳􏵶interval type􏵷),􏵶begin􏵷,􏵶end􏵷,􏵲get end interval􏵳􏵶interval type􏵷),􏵶value􏵷);
􏶳

􏷘-􏷗􏷒print operator􏷑
􏷐prints the notation for the operator􏷏
􏶠used for debug errors on failed constraints􏶡
􏶜􏶝􏷆ComparisonOperatorE􏷅􏷄operator􏷃􏷀the comparison operator to print􏶿
􏶴
    􏶲print the string for the enum􏶱
    􏶲easier than using sprintf or allocating memory􏶱
    switch(􏵶operator􏵷){
        case COMPARISON_OPERATOR_EQUAL_TO:          fprintf(stderr,"=="); break;
        case COMPARISON_OPERATOR_NOT_EQUAL_TO:      fprintf(stderr,"!="); break;
        case COMPARISON_OPERATOR_GREATER:           fprintf(stderr,">"); break;
        case COMPARISON_OPERATOR_LESS:              fprintf(stderr,"<"); break;
        case COMPARISON_OPERATOR_GREATER_EQUAL:     fprintf(stderr,">="); break;
        case COMPARISON_OPERATOR_LESS_EQUAL:        fprintf(stderr,"<="); break;
        default:;
    }
􏶳

􏷘-􏷗􏷒get begin interval􏷑
􏶜􏶝􏷆IntervalTypeE􏷅􏷄interval type􏷃􏷀the type of interval to get notation of􏶿
􏶚m􏶛􏶾char􏶽􏶼interval point notation􏶻􏶺notation for a particular interval endpoint􏶹
􏶴
    if (􏵶interval type􏵷 == INTERVAL_TYPE_CLOSED){
        return '[';
    }
    
    return '(';
􏶳

􏷘-􏷗􏷒get end interval􏷑
􏶜􏶝􏷆IntervalTypeE􏷅􏷄interval type􏷃􏷀the type of interval to get notation of􏶿
􏶚m􏶛􏶾char􏶽􏶼interval point notation􏶻􏶺notation for a particular interval endpoint􏶹
􏶴
    if (􏵶interval type􏵷 == INTERVAL_TYPE_CLOSED){
        return ']';
    }
    
    return ')';
􏶳