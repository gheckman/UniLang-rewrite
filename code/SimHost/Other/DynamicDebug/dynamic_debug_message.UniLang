􏶞g􏶟
􏷲A generic C structure representing a dynamic debug message.􏷱
􏷰A dynamic debug message can be created with different constructor functions.  
Due to the message representing variant type data internally,
it is recommended you create the message using one of its constructor functions.  
The reason we create this generic type in the first place, is so that the data can be storable,
and different message types can be iterated over.􏷯
􏷮Debug􏷭 􏷮Communication􏷭
􏷬Trevor Hickey􏷫
􏷤􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏷤􏷣􏷦DynamicDebugMessageData􏷥􏷢USES: DynamicDebugMessageT􏷡
􏷤􏷣􏷦DynamicDebugConfiguration􏷥􏷢USES: MAX_LENGTH_OF_DEBUG_PATH_VALUE, MAX_LENGTH_OF_DEBUG_STRING_VALUE􏷡
􏶔􏶕􏶒DynamicDebugType􏶓􏶖USES: DynamicDebugTypeE􏶗
􏶔􏶕􏶒string􏶓􏶖USES: strcpy()􏶗

􏷘+􏷗􏷒construct dynamic debug message from int􏷑
􏷐Get back a struct representing the UDP data we would like to send to the dynamic debugger.􏷏
􏶠Constructs a generic Dynamic Debug struct that can be transformed into a UDP message, and sent to the dynamic debugger􏶡
􏶜c􏶝􏷆int􏷅􏷄debug value􏷃􏷀The value to send over the network to the dynamic debugger.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶾DynamicDebugMessageT􏶽􏶼dynamic debug message􏶻􏶺The data that is to be sent over UDP to the dynamic debugger.􏶹
􏶴
    􏶲Set the value, and provide the correct data type enum for later dispatching.􏶱
    DynamicDebugMessageT tMessage;
    tMessage.m_eDataType = DYNAMIC_DEBUG_TYPE_INT;
    tMessage.m_uValue.m_nIntValue = 􏵶debug value􏵷;
    strcpy(tMessage.m_szPathName, 􏵶path name􏵷);
    return tMessage;
􏶳

􏷘+􏷗􏷒construct dynamic debug message from real􏷑
􏷐Get back a struct representing the UDP data we would like to send to the dynamic debugger.􏷏
􏶠Constructs a generic Dynamic Debug struct that can be transformed into a UDP message, and sent to the dynamic debugger􏶡
􏶜c􏶝􏷆double􏷅􏷄debug value􏷃􏷀The value to send over the network to the dynamic debugger.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶾DynamicDebugMessageT􏶽􏶼dynamic debug message􏶻􏶺The data that is to be sent over UDP to the dynamic debugger.􏶹
􏶴
    􏶲Set the value, and provide the correct data type enum for later dispatching.􏶱
    DynamicDebugMessageT tMessage;
    tMessage.m_eDataType = DYNAMIC_DEBUG_TYPE_REAL;
    tMessage.m_uValue.m_dRealValue = 􏵶debug value􏵷;
    strcpy(tMessage.m_szPathName, 􏵶path name􏵷);
    return tMessage;
􏶳

􏷘+􏷗􏷒construct dynamic debug message from bool􏷑
􏷐Get back a struct representing the UDP data we would like to send to the dynamic debugger.􏷏
􏶠Constructs a generic Dynamic Debug struct that can be transformed into a UDP message, and sent to the dynamic debugger􏶡
􏶜c􏶝􏷆BOOL􏷅􏷄debug value􏷃􏷀The value to send over the network to the dynamic debugger.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶾DynamicDebugMessageT􏶽􏶼dynamic debug message􏶻􏶺The data that is to be sent over UDP to the dynamic debugger.􏶹
􏶴
    􏶲Set the value, and provide the correct data type enum for later dispatching.􏶱
    DynamicDebugMessageT tMessage;
    tMessage.m_eDataType = DYNAMIC_DEBUG_TYPE_BOOL;
    tMessage.m_uValue.m_bBoolValue = 􏵶debug value􏵷;
    strcpy(tMessage.m_szPathName, 􏵶path name􏵷);
    return tMessage;
􏶳

􏷘+􏷗􏷒construct dynamic debug message from string􏷑
􏷐Get back a struct representing the UDP data we would like to send to the dynamic debugger.􏷏
􏶠Constructs a generic Dynamic Debug struct that can be transformed into a UDP message, and sent to the dynamic debugger􏶡
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_STRING_VALUE]􏷅􏷄debug value􏷃􏷀The value to send over the network to the dynamic debugger.􏶿
􏶜c􏶝􏷆char[MAX_LENGTH_OF_DEBUG_PATH_VALUE]􏷅􏷄path name􏷃􏷀A descriptive path name for the debug value.  Looks like a file path.􏶿
􏶾DynamicDebugMessageT􏶽􏶼dynamic debug message􏶻􏶺The data that is to be sent over UDP to the dynamic debugger.􏶹
􏶴
    􏶲Set the value, and provide the correct data type enum for later dispatching.􏶱
    DynamicDebugMessageT tMessage;
    tMessage.m_eDataType = DYNAMIC_DEBUG_TYPE_STRING;
    strcpy(tMessage.m_uValue.m_szStringValue,􏵶debug value􏵷);
    strcpy(tMessage.m_szPathName, 􏵶path name􏵷);
    return tMessage;
􏶳
