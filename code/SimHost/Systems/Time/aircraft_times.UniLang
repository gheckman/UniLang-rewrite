􏶞o􏶟
􏷲The aircraft times of the simulator􏷱
􏷰A simulation clock, a mission timer, and a total elapsed simulation time􏷯
􏷮Time􏷭 􏷮Aircraft Times􏷭 􏷮Component􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦SimulationClock􏷥􏷢HASA: SimulationClockT􏷡
􏷤􏷣􏷦MillisecondTimer􏷥􏷢HASA: MillisecondTimerT􏷡
􏷤􏷣􏷦DateTime􏷥􏷢HASA: DateTimeT􏷡
􏷤􏷣􏷦IostoHost􏷥􏷢HASA: IOStoHostT􏷡
􏶔􏶕􏶒Month􏶓􏶖USES: MONTH_JAN􏶗
􏶔􏶕􏶒TimeUtilities􏶓􏶖USES: TicksToMilliseconds()􏶗
􏶔􏶕􏶒vxworks􏶓􏶖must be included for tickLib􏶗
􏶔􏶕􏶒tickLib􏶓􏶖USES: tickGet()􏶗



􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠initializes all the aircraft times to a default state􏶡
􏶜􏶝􏷆unsigned long􏷅􏷄simulator start time􏷃􏷀the start time captured at the beginning of the simulation􏶿
􏶴
    􏶲initialize the components􏶱
    InitializeMillisecondTimer(&􏵴mission timer􏵵);
    
    􏶲initialize the simulation clock to a valid starting date􏶱
    􏶲The IOS is expected to do the same when it resets the clock.􏶱
    􏶲we'll start at the epoch􏶱
    InitializeSimulationClock(&􏵴simulation clock􏵵,MONTH_JAN,1,1970,0);

    􏶲set the initial tick􏶱
    􏵴simulator start time􏵵 = 􏵶simulator start time􏵷;

    􏶲ensure the total simulation time is correct upon initialization􏶱
    􏵲update total elapsed time􏵳);
􏶳


􏷘+􏷗􏷒update􏷑
􏷐update the aircraft times based on change triggers and forward progress of time􏷏􏶠􏶡
􏶜􏶝􏷆IOStoHostT􏷅􏷄triggered changes􏷃􏷀triggered changes for the various aircraft times􏶿
􏶴
    􏶲update the internal time components􏶱
    􏵲update mission timer􏵳􏵶triggered changes􏵷);
    􏵲update simulation clock􏵳􏵶triggered changes􏵷);

    􏶲update the total simulation time􏶱
    􏵲update total elapsed time􏵳);
􏶳

􏷘-􏷗􏷒update mission timer􏷑
􏷐updates mission timer based on change triggers and forward progress of time􏷏􏶠􏶡
􏶜􏶝􏷆IOStoHostT􏷅􏷄triggered changes􏷃􏷀triggered changes for the various aircraft times􏶿
􏶴
    􏶲decide whether to pause/unpause the mission time􏶱
    MillisecondTimerSetPauseState(&􏵴mission timer􏵵,􏵶triggered changes􏵷.m_bPauseMissionTime);
    
    􏶲decide whether to reset the mission time􏶱
    if (􏵶triggered changes􏵷.m_bResetMissionTime){
        MillisecondTimerReset(&􏵴mission timer􏵵);
    }
    
    MillisecondTimerUpdate(&􏵴mission timer􏵵);
􏶳

􏷘-􏷗􏷒update simulation clock􏷑
􏷐updates simulation clock based on change triggers and forward progress of time􏷏􏶠􏶡
􏶜􏶝􏷆IOStoHostT􏷅􏷄triggered changes􏷃􏷀triggered changes for the various aircraft times􏶿
􏶴
    􏶲decide whether to pause/unpause the simulation time􏶱
    SimulationClockSetPauseState(&􏵴simulation clock􏵵,􏵶triggered changes􏵷.m_bPauseSimulationTime);
    
    􏶲decide whether to reset the simulation clock􏶱
    if (􏵶triggered changes􏵷.m_bResetSimulationTime){
        SimulationClockReset(&􏵴simulation clock􏵵,
        (MonthE)􏵶triggered changes􏵷.m_nMonth,
        􏵶triggered changes􏵷.m_nDay,
        􏵶triggered changes􏵷.m_nYear,
        􏵶triggered changes􏵷.m_nMilliseconds);
    }
    
    SimulationClockUpdate(&􏵴simulation clock􏵵);
􏶳

􏷘-􏷗􏷒update total elapsed time􏷑
􏷐􏷏
􏶠updates the elapsed simulator time based on the current time, and the start time􏶡
􏶴
    􏶲update the elapsed simulator time based on the current time, and the start time􏶱
    􏵴elapsed simulator time􏵵 = TicksToMilliseconds(tickGet() - 􏵴simulator start time􏵵);
􏶳



􏶨simulation clock􏶧
􏶦An artificial clock, with date capabilities􏶥
􏶘-g􏶙􏶮SimulationClockT􏶭􏶬simulation clock􏶫􏶪0􏶩

􏶨mission timer􏶧
􏶦How long the current mission has been going on􏶥
􏶘-g􏶙􏶮MillisecondTimerT􏶭􏶬mission timer􏶫􏶪0􏶩

􏶨the total elapsed simulator time􏶧
􏶦the total amount of time that the simulator has been running􏶥
􏶘-g􏶙􏶮double􏶭􏶬elapsed simulator time􏶫􏵚milliseconds􏵛􏶪0􏶩

􏶨The starting kernel tick set when system was initialized.􏶧
􏶦It's used in correlation with the actual kernel tick to derive the amount of time that has gone by.􏶥
􏶘-􏶙􏶮double􏶭􏶬simulator start time􏶫􏶪0􏶩


