􏶞g􏶟
􏷲Applies electrical malfunctions to the electrical graph triggered from the IOS data􏷱
􏷰We assume the malfunctions have already been read into the input struct.􏷯
􏷮Electrical_System􏷭 􏷮Malfunction_Applier􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦ElectricalData􏷥􏷢USES: ElectricalMalfunctionsT􏷡
􏷤􏷣􏷦DCPowerSystem􏷥􏷢USES: DCPowerSystemOutputsT􏷡
􏶔􏶕􏶒string􏶓􏶖USES memset()􏶗

􏷘+􏷗􏷒apply electrical malfunctions􏷑
􏷐Applies electrical malfunctions to the electrical graph triggered from the IOS data􏷏
􏶠These malfunctions will turn off flow for the particular graph nodes.􏶡
􏶜mr􏶝􏷆DCPowerSystemOutputsT􏷅􏷄system􏷃􏷀The DC Power system that will be effected by the triggered malfunctions.􏶿
􏶜r􏶝􏷆ElectricalMalfunctionsT􏷅􏷄malfunction􏷃􏷀All of the possible malfunctions that can be applied to the electrical system.􏶿
􏶴
    􏶲apply malfunctions that can occur on any of the following electrical boxes:􏶱
    􏵲apply battery box malfunctions􏵳&􏵶system􏵷->m_tGraph,&􏵶system􏵷->m_tBatteryBox,􏵶malfunction􏵷);
    􏵲apply distribution box malfunctions􏵳&􏵶system􏵷->m_tGraph,􏵶system􏵷->m_ptDistributionBox,􏵶malfunction􏵷);
    􏵲apply after junction box malfunctions􏵳&􏵶system􏵷->m_tGraph,􏵶system􏵷->m_ptAfterJunctionBox,􏵶malfunction􏵷);
􏶳

􏷘-􏷗􏷒apply battery box malfunctions􏷑
􏷐Uses the IOS malfunctions to potentially stop flow on portions of the battery box􏷏
􏶠Applying a malfunction, only stops the flow of the electrical node􏶡
􏶜mr􏶝􏷆ElectricalGraphOutputsT􏷅􏷄graph􏷃􏷀The graph where the actual node elements exist.  The node element will be looked up through the box's Id􏶿
􏶜r􏶝􏷆BatteryBoxOutputsT􏷅􏷄box􏷃􏷀The Battery Box that will be effected by the triggered malfunctions.􏶿
􏶜r􏶝􏷆ElectricalMalfunctionsT􏷅􏷄malfunction􏷃􏷀All of the possible malfunctions that can be applied to the electrical system.􏶿
􏶴
    􏶲possibly stop flow on the battery bus􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷->m_uBus,􏵶malfunction􏵷->m_bCircuitBatteryBus);
    
    􏶲possibly stop flow on the bus relay􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷->m_uRelay,􏵶malfunction􏵷->m_bBatteryRelayFails);
􏶳

􏷘-􏷗􏷒apply distribution box malfunctions􏷑
􏷐Uses the IOS malfunctions to potentially stop flow on portions of the distribution box􏷏
􏶠Applying a malfunction, only stops the flow of the electrical node􏶡
􏶜mr􏶝􏷆ElectricalGraphOutputsT􏷅􏷄graph􏷃􏷀The graph where the actual node elements exist.  The node element will be looked up through the box's Id􏶿
􏶜r􏶝􏷆DistributionBoxOutputsT􏷅􏷄box􏷃􏷀The Distribution Box that will be effected by the triggered malfunctions.􏶿
􏶜r􏶝􏷆ElectricalMalfunctionsT􏷅􏷄malfunction􏷃􏷀All of the possible malfunctions that can be applied to the electrical system.􏶿
􏶴

    􏶲possibly stop flow on the bus tie 1 (force it to open)
    Q: What if the bus tie is already closed?  Does it stay closed during this malfunction?
    Does the malfunction only stop it from re-closing again in the future?
    A: The SME says that the BusTieFailsOpen will make the bus tie open even if it is already closed.􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷[0].m_uBusTieRelay,􏵶malfunction􏵷->m_bBusTie1FailsOpen);
    
    􏶲possibly stop flow on the bus tie 2 (force it to open)􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷[1].m_uBusTieRelay,􏵶malfunction􏵷->m_bBusTie2FailsOpen);
    
    􏶲possibly stop flow on main bus 1􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷[0].m_uMainBus,􏵶malfunction􏵷->m_bShortCircuitMainBus1);
    
    􏶲possibly stop flow on main bus 2􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷,􏵶box􏵷[1].m_uMainBus,􏵶malfunction􏵷->m_bShortCircuitMainBus2);
􏶳

􏷘-􏷗􏷒apply after junction box malfunctions􏷑
􏷐Uses the IOS malfunctions to potentially stop flow on portions of the after junction box􏷏
􏶠Applying a malfunction, only stops the flow of the electrical node􏶡
􏶜mr􏶝􏷆ElectricalGraphOutputsT􏷅􏷄graph􏷃􏷀The graph where the actual node elements exist.  The node element will be looked up through the box's Id􏶿
􏶜r􏶝􏷆AfterJunctionBoxOutputsT􏷅􏷄box􏷃􏷀The After Junction Box that will be effected by the triggered malfunctions.􏶿
􏶜r􏶝􏷆ElectricalMalfunctionsT􏷅􏷄malfunction􏷃􏷀All of the possible malfunctions that can be applied to the electrical system.􏶿
􏶴
    􏶲maybe we'll do something different depending on the level at which its overheating?
    maybe we won't stop flow anywhere until the overheat reaches a certain temperature?
    the description says that the generator does not automatically trip off.
    At least for now, let's just check if it's overheating at all, and if it is, we'll shut off the flow􏶱
    if (􏵶malfunction􏵷->m_nGenerator1StarterGeneratorOverheat > 0){
        􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[0].m_uGenerator, 􏵱);
    }

    if (􏵶malfunction􏵷->m_nGenerator2StarterGeneratorOverheat > 0){
        􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[1].m_uGenerator, 􏵱);
    }

    􏶲possibly stop flow on generator 1 starter relay􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[0].m_uStarterRelay, 􏵶malfunction􏵷->m_bGenerator1StarterGeneratorFail);

    􏶲possibly stop flow on generator 2 starter relay􏶱
    􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[1].m_uStarterRelay, 􏵶malfunction􏵷->m_bGenerator2StarterGeneratorFail);

    􏶲possibly stop flow on generator 1 due to over-voltage􏶱
    if (􏵶malfunction􏵷->m_nGenerator1StarterGeneratorOvervoltage > 0){
        􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[0].m_uGenerator, 􏵱);
    }

    􏶲possibly stop flow on generator 2 due to over-voltage􏶱
    if (􏵶malfunction􏵷->m_nGenerator2StarterGeneratorOvervoltage > 0){
        􏵲apply malfunction to component􏵳􏵶graph􏵷, 􏵶box􏵷[1].m_uGenerator, 􏵱);
    }
􏶳

􏷘-􏷗􏷒apply malfunction to component􏷑
􏷐given an id to a graph node, we can apply the malfunction to it􏷏
􏶠Applying the malfunction to the node will turn off its ability "to flow"􏶡
􏶜mr􏶝􏷆ElectricalGraphOutputsT􏷅􏷄graph􏷃􏷀The graph where the actual node exists.  The node element will be looked up through the Id􏶿
􏶜􏶝􏷆size_t􏷅􏷄id􏷃􏷀The ID of the node to change flow state on􏶿
􏶜􏶝􏷆BOOL􏷅􏷄malfunction􏷃􏷀whether or not the malfunction occurred.  True malfunctions stop flow.  False malfunctions give flow.􏶿
􏶴
    􏶲set trigger to receive electrical components out of the graph􏶱
    ElectricalGraphInputsT tInputs;
    memset(&tInputs,0,sizeof(tInputs));
    tInputs.m_bGetCircuitComponent = 􏵱;

    􏶲get the generic elecrical component􏶱
    tInputs.m_uNode = 􏵶id􏵷;
    UpdateElectricalGraph(􏵶graph􏵷, &tInputs);

    􏶲apply a possible malfunction to it
    You'll notice that we NOT(!) the malfunction.
    That's because the malfunction are true when they occur, but we're assigning it to
    whether the component can flow.􏶱
    􏵶graph􏵷->m_ptCircuitComponent->m_bHasFlow = !􏵶malfunction􏵷;
􏶳