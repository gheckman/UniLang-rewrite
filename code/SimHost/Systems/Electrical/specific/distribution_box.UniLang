􏶞o􏶟
􏷲A 􏶏 specific to the UH72A DC power system.􏷱
􏷰Stores a collection of 􏶏 node IDs and builds them into the generic electrical graph.􏷯
􏷮Electrical_System􏷭 􏷮Circuit_Box􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷤􏷣􏷦ElectricalGraph􏷥􏷢USES: ElectricalGraphOutputsT􏷡
􏶔􏶕􏶒string􏶓􏶖USES: strcpy()􏶗

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized.
Initializing a 􏶐 will construct all of its nodes into the generic electrical graph.
It will store the IDs given back by the graph so that they may be queried later by the user.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  //create all the internal nodes inside the graph data structure
  CreateNodes(ptOutputs,􏵶graph􏵷);
  
  //connect these newly created nodes
  CreateWires(ptOutputs,􏵶graph􏵷);
  
  //apply any nodes to ground that should be
  ApplyNodesToGround(ptOutputs,􏵶graph􏵷);
􏶳

􏷘-􏷗􏷒create nodes􏷑
􏷐Constructs all of the electrical components into the generic electrical graph data structure.􏷏
􏶠This will give all of the node a valid id for querying the graph later.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its nodes into.􏶿
􏶴
  //create all of the vertexes that are part of the 􏶐
  //the nonessential bus is technically outside the 􏶐,
  //but we include it here for conceptual organization
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddNode = 􏵱;
  
  //add node to graph
  strcpy(tInputs.m_szName, "main bus");
  tInputs.m_eType = NODE_TYPE_BUS;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴main bus􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "fuse 1");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 1􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "fuse 2");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 2􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "fuse 3");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 3􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "fuse 4");
  tInputs.m_eType = NODE_TYPE_FUSE;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴fuse 4􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "nonessential bus relay");
  tInputs.m_eType = NODE_TYPE_RELAY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵰;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴nonessential bus relay􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "shed bus relay");
  tInputs.m_eType = NODE_TYPE_RELAY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵰;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴shed bus relay􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "bus tie relay");
  tInputs.m_eType = NODE_TYPE_RELAY;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵰;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴bus tie relay􏵵 = 􏵶graph􏵷->m_uId;
  
  //add node to graph
  strcpy(tInputs.m_szName, "nonessential bus");
  tInputs.m_eType = NODE_TYPE_BUS;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  􏵴nonessential bus􏵵 = 􏵶graph􏵷->m_uId;
􏶳

􏷘-􏷗􏷒create wires􏷑
􏷐Connects all of the necessary 􏶐 nodes together.􏷏
􏶠The nodes being connected will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will construct its wires into.􏶿
􏶴
  //connect the related components
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bAddWire = 􏵱;
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴main bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 1􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴main bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 2􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴main bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 3􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴main bus􏵵;
  tInputs.m_uNodeY = 􏵴fuse 4􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴main bus􏵵;
  tInputs.m_uNodeY = 􏵴bus tie relay􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴fuse 1􏵵;
  tInputs.m_uNodeY = 􏵴nonessential bus relay􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴fuse 2􏵵;
  tInputs.m_uNodeY = 􏵴shed bus relay􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  //connect two nodes together
  tInputs.m_uNodeX = 􏵴nonessential bus relay􏵵;
  tInputs.m_uNodeY = 􏵴nonessential bus􏵵;
  tInputs.m_fResistance = 0.0f;
  tInputs.m_fExpectedAmperage = 0.0f;
  tInputs.m_bHasFlow = 􏵱;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
  
  
􏶳

􏷘-􏷗􏷒apply nodes to ground􏷑
􏷐Attach particular 􏶐 nodes to common ground.􏷏
􏶠The nodes being connected to ground will need to be created first.􏶡
􏶜􏶝􏷆ElectricalGraphOutputsT*const􏷅􏷄graph􏷃􏷀A generic electrical graph that the 􏶏 will use to connect its existing nodes to common ground.􏶿
􏶴
  //apply any nodes to ground that should be
  ElectricalGraphInputsT tInputs = {0};
  tInputs.m_bConnectNodeToCommonGround = 􏵱;
   
  //connect node to common ground
  tInputs.m_uNode = 􏵴nonessential bus􏵵;
  UpdateElectricalGraph(􏵶graph􏵷,&tInputs);
􏶳

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬main bus􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 1􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 2􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 3􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬fuse 4􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nonessential bus relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬shed bus relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬bus tie relay􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬nonessential bus􏶫􏶪0􏶩

􏶨The ID of a node that is conceptually stored in a 􏶏􏶧
􏶦This ID will be used to query the generic electrical graph
and receive back the actual node object.􏶥
􏶌g􏶑􏶘-􏶙􏶰􏶯􏶮size_t􏶭􏶬shed bus􏶫􏶪0􏶩