􏶞o􏶟
􏷲An electrical graph that can construct custom circuit configurations􏷱
􏷰Intended to be generic enough to be used for a variety of electrical system use cases.􏷯
􏷮Electrical_System􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷤􏷣􏷦stdioLib􏷥􏷢HASA: BOOL􏷡
􏷤􏷣􏷦Node􏷥􏷢HASA: NodeOutputsT􏷡
􏷤􏷣􏷦Paths􏷥􏷢HASA: PathsOutputsT􏷡
􏷤􏷣􏷦ElectricalConfig􏷥􏷢USES: MAX_NUMBER_OF_ELECTRICAL_NODES􏷡
􏷤􏷣􏷦vector􏷥􏷢USES: VectorT􏷡
􏶔􏶕􏶒NodeType􏶓􏶖USES: NodeTypeE􏶗
􏶔􏶕􏶒stdio􏶓􏶖USES: perror()􏶗

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be in an invalid state until initialized􏶡
􏶴
  􏶲the graph starts with zero nodes, and nothing connected􏶱
  InitializeVector(&􏵴nodestwo􏵵,sizeof(NodeOutputsT),0);
  
  􏶲establish a common ground􏶱
  􏵴common ground􏵵 = 􏵲add node􏵳"common ground",NODE_TYPE_GROUND,0,0.0f,􏵱);
􏶳

􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐􏷏
􏶠􏶐 will leak memory unless destructed􏶡
􏶴
  􏶲C does not have destructors.􏶱
  DestructVector(&􏵴nodestwo􏵵);
􏶳

􏷘+􏷗􏷒add node􏷑
􏷐Adds a specified node to the graph.􏷏
􏶠The user can construct a node into the graph, and receive back a unique ID to query for it later.􏶡
􏶜􏶝􏷆char[MAX_NUMBER_OF_CHARACTERS_IN_NODE_NAME]􏷅􏷄name􏷃􏷀the name of the node being added􏶿
􏶜􏶝􏷆NodeTypeE􏷅􏷄type􏷃􏷀the type of the node that is being added􏶿
􏶜􏶝􏷆float􏷅􏷄resistance􏷃􏷀the resistance of the node being added􏶿
􏶜􏶝􏷆float􏷅􏷄expected amperage􏷃􏷀what we expect the amperage draw to be for the particular node􏶿
􏶜􏶝􏷆BOOL􏷅􏷄has flow􏷃􏷀whether or not the node allows electricity to flow through it.􏶿
􏶚m􏶛􏶾size_t􏶽􏶼id􏶻􏶺a unique id that represents the node just created.􏶹
􏶴
  􏶲calculate the new node id􏶱
  size_t uId = 􏵴nodestwo􏵵.m_uSize;
  
  􏶲create the new node with a unique id􏶱
  NodeOutputsT tNode;
  InitializeNode(&tNode,􏵶name􏵷,uId,􏵶type􏵷,􏵶resistance􏵷,􏵶expected amperage􏵷,􏵶has flow􏵷);
  
  􏶲add the new node and increment the total count.
  the total count is used as an index, 
  so this prepares the node list for the next insertion.
  we also have a safety check to avoid out-of-bounds indexing􏶱
  VectorAdd(&􏵴nodestwo􏵵,&tNode);
  
  return uId;
􏶳

􏷘+􏷗􏷒add wire􏷑
􏷐Connect two nodes together and allow electricity to flow both ways.􏷏
􏶠Connects two nodes together, adds a wire between them, and applies the appropriate junction points.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀One of the nodes to attach to the other node.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀One of the nodes to attach to the other node.􏶿
􏶜􏶝􏷆float􏷅􏷄resistance􏷃􏷀The resistance of the wire.􏶿
􏶜􏶝􏷆float􏷅􏷄expected amperage􏷃􏷀what we expect the amperage draw to be for the particular node􏶿
􏶜􏶝􏷆BOOL􏷅􏷄has flow􏷃􏷀Whether he wire has flow initially.􏶿
􏶚m􏶛􏶾size_t􏶽􏶼id􏶻􏶺The id of the newly added node.􏶹
􏶴
  􏶲calculate the wire and get the id􏶱
  size_t uId = 􏵲add node􏵳"wire",NODE_TYPE_WIRE,􏵶resistance􏵷,􏵶expected amperage􏵷,􏵶has flow􏵷);
  
  􏶲connect the wire between the two components􏶱
  􏵲connect wire between two other nodes bidirectionally􏵳uId,􏵶node x􏵷,􏵶node y􏵷);
  
  􏶲give the user a lookup key(an id) to their newly created node􏶱
  return uId;
􏶳

􏷘+􏷗􏷒add unidirectional wire􏷑
􏷐Connect two nodes together and allow electricity to only flow one way between them.􏷏
􏶠Connects two nodes together, adds a wire between them,
and applies the appropriate junction points.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀One of the nodes to attach to the other. Electricity will flow from this node to the other.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀One of the nodes to attach to the other. Electricity will NOT flow from this node to the other.􏶿
􏶜􏶝􏷆float􏷅􏷄resistance􏷃􏷀The resistance of the wire.􏶿
􏶜􏶝􏷆float􏷅􏷄expected amperage􏷃􏷀what we expect the amperage draw to be for the particular node􏶿
􏶜􏶝􏷆BOOL􏷅􏷄has flow􏷃􏷀Whether he wire has flow initially.􏶿
􏶚m􏶛􏶾size_t􏶽􏶼id􏶻􏶺The id of the newly added node.􏶹
􏶴
  􏶲calculate the wire and get the id􏶱
  size_t uId = 􏵲add node􏵳"wire",NODE_TYPE_WIRE,􏵶resistance􏵷,􏵶expected amperage􏵷,􏵶has flow􏵷);
  
  􏶲connect the wire between the two components􏶱
  􏵲connect wire between two other nodes unidirectionally􏵳uId,􏵶node x􏵷,􏵶node y􏵷);
  
  􏶲give the user a lookup key(an id) to their newly created node􏶱
  return uId;
􏶳

􏷘+􏷗􏷒connect node to common ground􏷑
􏷐Specifies that the node passed in, has a direct connection to common ground.􏷏
􏶠Creates a connection between the component node passed in, and the internally managed ground node. 
Having nodes connect to common ground, is important for identifying valid paths through the circuit.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node that will be applied to ground.􏶿
􏶴
  􏶲add a connection the the ground node which is a part of the graph itself.􏶱
  􏵲add wire􏵳􏵶node􏵷,􏵴common ground􏵵,0,0.0f,􏵱);
􏶳

􏷘+􏷗􏷒clear voltage and current􏷑
􏷐Clears all of the calculations performed on the nodes.  Setting the voltage and current of every node to zero􏷏
􏶠Changes will often occur on the graph(new power sources started, fuses blown, etc)
This will clear all the previous calculated electrical data.􏶡
􏶴 
  􏶲iterate over all of the node elements,􏶱
  􏶲and clear their calculated electrical data.􏶱
  size_t unIndex = 0;
  for (; unIndex < 􏵴nodestwo􏵵.m_uSize; ++unIndex)
  {
    ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,unIndex))->m_fVoltage = 0;
    ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,unIndex))->m_fResistance = 0;
  }
􏶳

􏷘+􏷗􏷒give all nodes the ability to flow􏷑
􏷐Allows flow across all nodes􏷏
􏶠Used in the event that you want all portions of the circuit to allow electrical flow􏶡
􏶴
  􏶲iterate over all of the node elements,􏶱
  􏶲and turn on their ability to receive flow.􏶱
  size_t unIndex = 0;
  for (; unIndex < 􏵴nodestwo􏵵.m_uSize; ++unIndex)
  {
    ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,unIndex))->m_bHasFlow = 􏵱;
  }
􏶳

􏷘+􏷗􏷒get circuit component􏷑
􏷐Query the graph with a node id to get back the actual node.􏷏
􏶠Node ids are given to the client when they tell the graph to create nodes for them.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node id associated with the actual node in the graph􏶿
􏶚m􏶛􏶾NodeOutputsT*􏶽􏶼circuit component􏶻􏶺the id of the newly added node􏶹
􏶴
    􏶲query the entire list of nodes to get the one that matches the id passed in􏶱
    return ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷));
􏶳

􏷘+􏷗􏷒get paths to ground􏷑
􏷐Given a starting node, the function computes a matrix of all possible paths to ground.􏷏
􏶠The matrix or 'Path List' can be used later to compute electrical data. 
Elements of the matrix can be used to query the graph for the actual nodes.
see: GetCircuitComponent(size_t nNode);
􏶡
􏶜􏶝􏷆size_t􏷅􏷄start node􏷃􏷀The starting node in which to start the traversal from.􏶿
􏶚m􏶛􏶾PathsOutputsT􏶽􏶼paths to ground􏶻􏶺All of the valid electrical paths from starting node to common ground.􏶹
􏶴 
  􏶲create a pathlist to store all of the paths􏶱
  􏶲a path to slowly build up as we traverse,􏶱
  􏶲and a list of already seen nodes(to avoid cycles)􏶱
  PathsOutputsT tPathList;
  PathOutputsT tList, tSeen;
  InitializePaths(&tPathList);
  InitializePath(&tList);
  InitializePath(&tSeen);
  􏵲recursive gather of paths􏵳􏵶start node􏵷,&tSeen,&tList,&tPathList);
  return tPathList;
􏶳

􏷘-􏷗􏷒connect wire between two other nodes bidirectionally􏷑
􏷐Allow current to flow bidirectionally between a wire and two nodes.􏷏
􏶠The order of NodeX and NodeY IS NOT important.􏶡
􏶜􏶝􏷆size_t􏷅􏷄wire id􏷃􏷀the wire used in the connection process􏶿
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀one of the nodes used in the connection process􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀one of the nodes used in the connection process􏶿
􏶴
  􏶲create a wire between two nodes that flows both ways􏶱
  􏵲allow current flow out of wire to nodes􏵳􏵶wire id􏵷,􏵶node x􏵷,􏵶node y􏵷);
  􏵲allow current flow of nodes to wire bidirectionally􏵳􏵶wire id􏵷,􏵶node x􏵷,􏵶node y􏵷);
􏶳

􏷘-􏷗􏷒connect wire between two other nodes unidirectionally􏷑
􏷐Allow current to flow uidirectionally between a wire and two nodes.􏷏
􏶠The order of NodeX and NodeY IS important.􏶡
􏶜􏶝􏷆size_t􏷅􏷄wire id􏷃􏷀The wire used in the connection process.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀The node that will allow electricity in but not out.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀The node that will allow electricity to flow both ways.􏶿
􏶴
  􏶲create a wire between two nodes that flows ONE way􏶱
  􏵲allow current flow out of wire to nodes􏵳􏵶wire id􏵷,􏵶node x􏵷,􏵶node y􏵷);
  􏵲allow current flow of nodes to wire unidirectionally􏵳􏵶wire id􏵷,􏵶node x􏵷,􏵶node y􏵷);
􏶳

􏷘-􏷗􏷒allow current flow of nodes to wire bidirectionally􏷑
􏷐Part of the connection process of adding bidirectional flow between a wire and two nodes.􏷏
􏶠The order of NodeX and NodeY IS NOT important.􏶡
􏶜􏶝􏷆size_t􏷅􏷄wire id􏷃􏷀The wire used in the connection process.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀one of the nodes used in the connection process􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀one of the nodes used in the connection process􏶿
􏶴
  􏶲add the bidirectional junctions for the nodes􏶱
  JunctionOutputsT tJunction;
  NodeInputsT tInputs = {0};
  InitializeJunction(&tJunction,􏵶wire id􏵷,􏵱);
  
  􏶲add the junction to the nodes􏶱
  tInputs.m_tJunction = tJunction;
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node x􏵷),&tInputs);
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node y􏵷),&tInputs);
􏶳

􏷘-􏷗􏷒allow current flow of nodes to wire unidirectionally􏷑
􏷐Part of the connection process of adding uidirectional flow between a wire and two nodes.􏷏
􏶠The order of NodeX and NodeY IS important.􏶡
􏶜􏶝􏷆size_t􏷅􏷄wire id􏷃􏷀The wire used in the connection process.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀The node that will allow electricity in but not out.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀The node that will allow electricity to flow both ways.􏶿
􏶴
  􏶲add the uidirectional junctions for the nodes􏶱
  JunctionOutputsT tJunctionX, tJunctionY;
  NodeInputsT tInputs = {0};
  InitializeJunction(&tJunctionX,􏵶wire id􏵷,􏵱);
  InitializeJunction(&tJunctionY,􏵶wire id􏵷,􏵰);
  
  􏶲add the junctions to the nodes􏶱
  tInputs.m_tJunction = tJunctionX;
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node x􏵷),&tInputs);
  tInputs.m_tJunction = tJunctionY;
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node y􏵷),&tInputs);
􏶳

􏷘-􏷗􏷒allow current flow out of wire to nodes􏷑
􏷐Applies flow properties to wires􏷏
􏶠The graph assumes that wires themselves will always carry current both ways
The order of NodeX and NodeY IS NOT important.􏶡
􏶜􏶝􏷆size_t􏷅􏷄wire id􏷃􏷀The wire used in the connection process.􏶿
􏶜􏶝􏷆size_t􏷅􏷄node x􏷃􏷀one of the nodes used in the connection process􏶿
􏶜􏶝􏷆size_t􏷅􏷄node y􏷃􏷀one of the nodes used in the connection process􏶿
􏶴
  􏶲add the bidirectional junctions for the nodes􏶱
  JunctionOutputsT tJunctionX, tJunctionY;
  NodeInputsT tInputs = {0};
  InitializeJunction(&tJunctionX,􏵶node x􏵷,􏵱);
  InitializeJunction(&tJunctionY,􏵶node y􏵷,􏵱);
  
  􏶲add the junctions to the nodes􏶱
  tInputs.m_tJunction = tJunctionX;
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶wire id􏵷),&tInputs);
  tInputs.m_tJunction = tJunctionY;
  UpdateNode((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶wire id􏵷),&tInputs);
􏶳

􏷘-􏷗􏷒recursive gather of paths􏷑
􏷐Recursively builds up lists of complete paths to ground while exploring all depth first paths.􏷏
􏶠Complete paths to ground represent paths that electricity is guaranteed to flow through.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node that the traversal is currently on.􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄seen􏷃􏷀A list of nodes that have already been seen(used to avoid cycles)􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄list􏷃􏷀The current list of the current depth traversal.􏶿
􏶜mr􏶝􏷆PathsOutputsT􏷅􏷄path list􏷃􏷀A list of paths to ground. This function may or may not add additional paths to the list.􏶿
􏶴
  􏶲used for input parameters to API methods􏶱
  PathInputsT tPathInputs = {0};
  PathsInputsT tPathsInputs = {0};
  
  􏶲check if node already exists in path􏶱
  BOOL bAlreadyExistsInPath;
  tPathInputs.m_bExists = 􏵱;
  tPathInputs.m_uNode = 􏵶node􏵷;
  UpdatePath(􏵶seen􏵷,&tPathInputs);
  bAlreadyExistsInPath = 􏵶seen􏵷->m_bExists;
  tPathInputs.m_bExists = 􏵰;
  
  
  if (!bAlreadyExistsInPath && 􏵲can be traveled through􏵳􏵶node􏵷))
  {
    􏶲add the node to the list, and mark it as seen􏶱
    tPathInputs.m_bAdd = 􏵱;
    UpdatePath(􏵶seen􏵷,&tPathInputs);
    UpdatePath(􏵶list􏵷,&tPathInputs);
    
    􏶲continue traversing if the node is not the common ground􏶱
    if (((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷))->m_eType != NODE_TYPE_GROUND)
    {
      􏵲traverse neighbors􏵳􏵶node􏵷,􏵶seen􏵷,􏵶list􏵷,􏵶path list􏵷);
    }
    
    􏶲if the node is a common ground, we can assume that we've made a successful route through the circuit.
    since this a successful route, we will add it to the total list of paths that we are collecting.􏶱
    else
    {
      􏶲add the path to the list of paths􏶱
      tPathsInputs.m_tPath = *􏵶list􏵷;
      UpdatePaths(􏵶path list􏵷,&tPathsInputs);
    }
    
    􏶲when we arrive at a leaf node, or better put:
    "a node that does not have any traversable neighbors",
    the recursion will reach its base case, and begin to unroll.
    To implement depth first search, we'll need to decrement our marker to the last element on our lists.
    This is analogous to popping off stack elements.􏶱
    --􏵶seen􏵷->m_uSize;
    --􏵶list􏵷->m_uSize;
  }
􏶳

􏷘-􏷗􏷒traverse neighbors􏷑
􏷐Gathers all of the appropriate neighbors and traverses them.􏷏
􏶠Avoids neighbors that would cause cycles.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node that the traversal is currently on.􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄seen􏷃􏷀A list of nodes that have already been seen(used to avoid cycles)􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄list􏷃􏷀The current list of the current depth traversal.􏶿
􏶜mr􏶝􏷆PathsOutputsT􏷅􏷄path list􏷃􏷀A list of paths to ground. This function may or may not add additional paths to the list.􏶿
􏶴
  􏶲recurse down all of the neighbors that we haven't seen before,􏶱
  􏶲and that we have the ability to flow through􏶱
  PathOutputsT tUnseenNeighbors = 􏵲get unseen neighbors􏵳􏵶node􏵷,􏵶seen􏵷);
  size_t unIndex = 0;
  
  for (;unIndex < tUnseenNeighbors.m_uSize; ++unIndex)
  {
    􏵲recursive gather of paths􏵳tUnseenNeighbors.m_puPath[unIndex],􏵶seen􏵷,􏵶list􏵷,􏵶path list􏵷);
  }
􏶳

􏷘-􏷗􏷒get unseen neighbors􏷑
􏷐Gets a list of a node's neighbors that have not yet been visited.􏷏
􏶠Used to avoid cycles while traversing.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node that whose unseen neighbors are being gathered.􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄seen􏷃􏷀a list of nodes that have already been seen(unseen to filter out unseen neighbors)􏶿
􏶚m􏶛􏶾PathOutputsT􏶽􏶼unseen neighbors􏶻􏶺􏵱 if current can flow through the given node of the given graph; 􏵰 if it cannot.􏶹
􏶴

  􏶲the list of unseen paths that will be built and returned􏶱
  PathOutputsT tUnseenNodes;
  size_t unIndex = 0;
  
  􏶲set the 'Add' method trigger􏶱
  PathInputsT tPathInputs = {0};
  tPathInputs.m_bAdd = 􏵱;
  
  􏶲create a list of unseen neighbors that we will build up as we discover them􏶱
  InitializePath(&tUnseenNodes);
  
  􏶲loop over all of the junctions for a particular node􏶱
  for (;unIndex < ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷))->m_uNumberOfJunctions; ++unIndex)
  {
    
    􏶲decide whether we have an unseen neighbor worth traversing􏶱
    if(􏵲is traversable unseen neighbor􏵳􏵶node􏵷,unIndex,􏵶seen􏵷))
    {
      􏶲add the node as it can be flowed through, and has not been visited yet􏶱
      tPathInputs.m_uNode = ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷))->m_ptJunctions[unIndex].m_uConnectionId;
      UpdatePath(&tUnseenNodes,&tPathInputs);
    }
    
  }
  
  return tUnseenNodes;
􏶳

􏷘-􏷗􏷒is traversable unseen neighbor􏷑
􏷐Decides whether a neighbor node is valid to visit during a path traversal.􏷏
􏶠It decides this by checking to see if the neighbor has already been seen(to avoid cycles), 
and whether or not the junction between them is 'flowable'.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node whose neighbors are being checked against.􏶿
􏶜􏶝􏷆size_t􏷅􏷄junction index􏷃􏷀The neighbor of the first node (represented by the the junction's index).􏶿
􏶜mr􏶝􏷆PathOutputsT􏷅􏷄seen􏷃􏷀a list of nodes that have already been seen.􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼is traversable unseen neighbor􏶻􏶺􏵱 if the node has not been seen yet, and due to it's properties, is also traversable; 􏵰 if one or both of these stipulations are 􏵰.􏶹
􏶴
  􏶲assume the neighbor is not worth traversing down until proven otherwise􏶱
  BOOL bValidNeighborToTraverse = 􏵰;
  
  􏶲it's proven otherwise, if we have not yet seen the neighbor node id􏶱
  􏶲and if the junction that points to the neighbor node id allows flow.􏶱
  
  􏶲check if node already exists in path􏶱
  PathInputsT tPathInputs = {0};
  tPathInputs.m_bExists = 􏵱;
  tPathInputs.m_uNode = ((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷))->m_ptJunctions[􏵶junction index􏵷].m_uConnectionId;
  UpdatePath(􏵶seen􏵷,&tPathInputs);

  􏶲if we haven't seen the node before􏶱
  if (!􏵶seen􏵷->m_bExists){
    
    􏶲and if the junction allows flow􏶱
    if(((NodeOutputsT*)VectorGet(&􏵴nodestwo􏵵,􏵶node􏵷))->m_ptJunctions[􏵶junction index􏵷].m_bHasFlow){
      bValidNeighborToTraverse = 􏵱;
    }
  }
  
  return bValidNeighborToTraverse;
􏶳

􏷘-􏷗􏷒can be traveled through􏷑
􏷐Evaluates whether a node can be traversed through or not.􏷏
􏶠Used to avoid gathering nodes that would lead to cycles.􏶡
􏶜􏶝􏷆size_t􏷅􏷄node􏷃􏷀The node being checked to see if current can flow through it.􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼can be travelled through􏶻􏶺􏵱 if current can flow through the given node of the given graph; 􏵰 if it cannot.􏶹
􏶴
  􏶲check if a component has flow using a node id􏶱
  return 􏵲get circuit component􏵳􏵶node􏵷)->m_bHasFlow;
􏶳

􏶨An electrical graph will always have a common ground to represent complete circuit paths.􏶧
􏶦Common ground is included inside the graph as a convenience.  
It saves the user from having to create the node themselves.􏶥
􏶘-􏶙􏶮size_t􏶭􏶬common ground􏶫􏶪0􏶩

􏶨All of the nodes that make up the graph.􏶧
􏶦The entire electrical graph is represented as an array of nodes.􏶥
􏶘-􏶙􏶮VectorT􏶭􏶬nodestwo􏶫􏶪􏶩

