􏶞g􏶟
􏷲generic serialization functions for different endians􏷱
􏷰Deals with endianness and address invariance. not padding/offsets.  
The same functions can be used for both packing and unpacking􏷯
􏷮Bit Serialization􏷭 􏷮Network􏷭 􏷮Utilities􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦Defs.h􏷥􏷢USES: BYTE􏷡
􏷤s􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏷤s􏷣􏷦stddef􏷥􏷢USES: size_t􏷡
􏷤􏷣􏷦SerializationAction.h􏷥􏷢USES: SerializationActionE􏷡
􏶔􏶕􏶒BitUnpacking􏶓􏶖USES: unpacking calls􏶗
􏶔􏶕􏶒BitPacking􏶓􏶖USES: packing calls􏶗

􏷘+􏷗􏷒serialize 8 bool params to a byte􏷑
􏷐serializes eight BOOLs from a single BYTE of a buffer􏷏
􏶠example: 01111111 <-> {􏵱,􏵱,􏵱,􏵱,􏵱,􏵱,􏵱,􏵰}􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄data buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start serializing the data at􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 0􏷃􏷀bool 0 to map to bit 0 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 1􏷃􏷀bool 1 to map to bit 1 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 2􏷃􏷀bool 2 to map to bit 2 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 3􏷃􏷀bool 3 to map to bit 3 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 4􏷃􏷀bool 4 to map to bit 4 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 5􏷃􏷀bool 5 to map to bit 5 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 6􏷃􏷀bool 6 to map to bit 6 of the byte􏶿
􏶜rm􏶝􏷆BOOL􏷅􏷄bool 7􏷃􏷀bool 7 to map to bit 7 of the byte􏶿
􏶜􏶝􏷆SerializationActionE􏷅􏷄action􏷃􏷀the serialization action to perform on the data􏶿
􏵦uBufferIterator != 0􏵧􏵤the buffer iterator will increment so that it can be used to serialize the next set of data􏵥
􏶴
    􏶲either pack or unpack based on the action sent in􏶱
    switch(􏵶action􏵷){
        case SERIALIZATION_ACTION_PACK:    Pack8BoolParamsIntoAByte(􏵶data buffer􏵷,􏵶buffer iterator􏵷,*􏵶bool 0􏵷,*􏵶bool 1􏵷,*􏵶bool 2􏵷,*􏵶bool 3􏵷,*􏵶bool 4􏵷,*􏵶bool 5􏵷,*􏵶bool 6􏵷,*􏵶bool 7􏵷); break;
        case SERIALIZATION_ACTION_UNPACK:  Unpack8BoolParamsFromAByte(􏵶data buffer􏵷,􏵶buffer iterator􏵷,􏵶bool 0􏵷,􏵶bool 1􏵷,􏵶bool 2􏵷,􏵶bool 3􏵷,􏵶bool 4􏵷,􏵶bool 5􏵷,􏵶bool 6􏵷,􏵶bool 7􏵷); break;
        default:;
    }
􏶳


􏷘+􏷗􏷒serialize 8 bools to a byte􏷑
􏷐serializes eight BOOLs from a single BYTE of a buffer􏷏
􏶠example: 01111111 <-> {􏵱,􏵱,􏵱,􏵱,􏵱,􏵱,􏵱,􏵰}􏶡
􏶜m􏶝􏷆BYTE[]􏷅􏷄data buffer􏷃􏷀Reference to data buffer􏶿
􏶜mr􏶝􏷆size_t􏷅􏷄buffer iterator􏷃􏷀the index of the buffer to start serializing the data at􏶿
􏶜m􏶝􏷆BOOL[]􏷅􏷄bools􏷃􏷀an array of 8 bools to serialize to a byte􏶿
􏶜􏶝􏷆SerializationActionE􏷅􏷄action􏷃􏷀the serialization action to perform on the data􏶿
􏵪􏵫􏵨size of bool array must be == 8􏵩
􏵦uBufferIterator != 0􏵧􏵤the buffer iterator will increment so that it can be used to serialize the next set of data􏵥
􏶴
    􏶲either pack or unpack based on the action sent in􏶱
    switch(􏵶action􏵷){
        case SERIALIZATION_ACTION_PACK:    Pack8BoolsIntoAByte(􏵶data buffer􏵷,􏵶buffer iterator􏵷,􏵶bools􏵷); break;
        case SERIALIZATION_ACTION_UNPACK:  Unpack8BoolsFromAByte(􏵶data buffer􏵷,􏵶buffer iterator􏵷,􏵶bools􏵷); break;
        default:;
    }
􏶳