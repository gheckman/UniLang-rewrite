􏶞g􏶟
􏷲float point approximation functions􏷱
􏷰used for checking the equality of floating point numbers through approximation
It is well known that comparing floating point numbers with raw comparison operators will not work due to precision errors􏷯
􏷮Floating Point Approximation􏷭􏷮Utilities􏷭
􏷬Trevor Hickey􏷫
􏷤s􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏶔s􏶕􏶒math􏶓􏶖USES: fabs()􏶗
􏶔􏶕􏶒MathUtilities􏶓􏶖USES: FMaxF()􏶗
􏶔s􏶕􏶒float.h􏶓􏶖USES: FLT_EPSILON, DBL_EPSILON􏶗

􏷘+􏷗􏷒approximately equal f􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates the equality of two floating point numbers using the std float epsilon􏶡
􏶜􏶝􏷆float􏷅􏷄x􏷃􏷀one of the numbers used to test equality􏶿
􏶜􏶝􏷆float􏷅􏷄y􏷃􏷀one of the numbers used to test equality􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the two numbers are approximately equal􏶹
􏶴
    return fabs(􏵶x􏵷 - 􏵶y􏵷) <= FMaxF(fabs(􏵶x􏵷),fabs(􏵶y􏵷)) * FLT_EPSILON;
􏶳

􏷘+􏷗􏷒approximately greater equal f􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates if one float is >= to another using the std float epsilon􏶡
􏶜􏶝􏷆float􏷅􏷄left􏷃􏷀left operand􏶿
􏶜􏶝􏷆float􏷅􏷄right􏷃􏷀right operand􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the left operand is approximately >= to the right operand􏶹
􏶴
    return 􏵲approximately equal f􏵳􏵶left􏵷,􏵶right􏵷) || 􏵶left􏵷 > 􏵶right􏵷;
􏶳

􏷘+􏷗􏷒approximately less equal f􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates if one float is <= to another using the std float epsilon􏶡
􏶜􏶝􏷆float􏷅􏷄left􏷃􏷀left operand􏶿
􏶜􏶝􏷆float􏷅􏷄right􏷃􏷀right operand􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the left operand is approximately <= to the right operand􏶹
􏶴
    return 􏵲approximately equal f􏵳􏵶left􏵷,􏵶right􏵷) || 􏵶left􏵷 < 􏵶right􏵷;
􏶳

􏷘+􏷗􏷒approximately equal d􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates the equality of two floating point numbers using the std double epsilon􏶡
􏶜􏶝􏷆double􏷅􏷄x􏷃􏷀one of the numbers used to test equality􏶿
􏶜􏶝􏷆double􏷅􏷄y􏷃􏷀one of the numbers used to test equality􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the two numbers are approximately equal􏶹
􏶴
    return fabs(􏵶x􏵷 - 􏵶y􏵷) <= FMax(fabs(􏵶x􏵷),fabs(􏵶y􏵷)) * DBL_EPSILON;
􏶳

􏷘+􏷗􏷒approximately greater equal d􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates if one double is >= to another using the std double epsilon􏶡
􏶜􏶝􏷆float􏷅􏷄left􏷃􏷀left operand􏶿
􏶜􏶝􏷆float􏷅􏷄right􏷃􏷀right operand􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the left operand is approximately >= to the right operand􏶹
􏶴
    return 􏵲approximately equal d􏵳􏵶left􏵷,􏵶right􏵷) || 􏵶left􏵷 > 􏵶right􏵷;
􏶳

􏷘+􏷗􏷒approximately less equal d􏷑
􏷐Since floating point math is imprecise, checking for float equality after operations, will often leads to unexpected results􏷏
􏶠approximates if one double is <= to another using the std double epsilon􏶡
􏶜􏶝􏷆float􏷅􏷄left􏷃􏷀left operand􏶿
􏶜􏶝􏷆float􏷅􏷄right􏷃􏷀right operand􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼equal􏶻􏶺whether the left operand is approximately <= to the right operand􏶹
􏶴
    return 􏵲approximately equal d􏵳􏵶left􏵷,􏵶right􏵷) || 􏵶left􏵷 < 􏵶right􏵷;
􏶳
