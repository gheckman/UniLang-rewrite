􏶞g􏶟
􏷲bit manipulation utilities􏷱
􏷰utilities for bit manipulating values.  
Q: why only int and BYTE functions?  
A: Because this is C, and we don't have templates.  
I wanted to avoid macros for obvious reasons.  They lack type safety.  
They can cause other unintended side effects on parameters; they can't be used as function pointers; they can be reassigned;􏷯
􏷮Bit Utilities􏷭􏷮Utilities􏷭
􏷬Trevor Hickey􏷫

􏷤􏷣􏷦Defs.h􏷥􏷢USES: BYTE􏷡
􏷤s􏷣􏷦stdioLib􏷥􏷢USES: BOOL􏷡
􏷤s􏷣􏷦stddef􏷥􏷢USES: size_t􏷡
􏶔􏶕􏶒limits􏶓􏶖USES: CHAR_BIT􏶗

􏷘+􏷗􏷒set all bits􏷑
􏷐sets all bits to 1􏷏
􏶠sets number to its max value􏶡
􏶜mr􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶴
    *􏵶number􏵷 = ~(*􏵶number􏵷 & 0);
􏶳
􏷘+􏷗􏷒set all bits of byte􏷑
􏷐sets all bits to 1􏷏
􏶠sets byte to its max value􏶡
􏶜mr􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶴
    *􏵶byte􏵷 = (BYTE)~(*􏵶byte􏵷 & 0);
􏶳

􏷘+􏷗􏷒set nth bit􏷑
􏷐sets the nth bit of a number􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜mr􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the number to set (indexing starts at zero)􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(int) * CHAR_BIT){
        *􏵶number􏵷 |= 1 << 􏵶index􏵷;
    }
􏶳
􏷘+􏷗􏷒set nth bit of byte􏷑
􏷐sets the nth bit of a byte􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜mr􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the byte to set (indexing starts at zero)􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(BYTE) * CHAR_BIT){
        *􏵶byte􏵷 |= 1 << 􏵶index􏵷;
    }
􏶳

􏷘+􏷗􏷒clear all bits􏷑
􏷐clears all bits to 0􏷏
􏶠sets number to 0􏶡
􏶜mr􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶴
    *􏵶number􏵷 = 0;
􏶳

􏷘+􏷗􏷒clear all bits of byte􏷑
􏷐clears all bits to 0􏷏
􏶠sets number to 0􏶡
􏶜mr􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶴
    *􏵶byte􏵷 = 0;
􏶳

􏷘+􏷗􏷒clear nth bit􏷑
􏷐clears the nth bit of a number􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜mr􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the number to set (indexing starts at zero)􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(int) * CHAR_BIT){
        *􏵶number􏵷 &= ~(1 << 􏵶index􏵷);
    }
􏶳

􏷘+􏷗􏷒clear nth bit of byte􏷑
􏷐clears the nth bit of a byte􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜mr􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the byte to set (indexing starts at zero)􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(BYTE) * CHAR_BIT){
        *􏵶byte􏵷 &= ~(1 << 􏵶index􏵷);
    }
􏶳

􏷘+􏷗􏷒bit is set􏷑
􏷐checks whether a bit is set􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the number to set (indexing starts at zero)􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼bit is set􏶻􏶺whether the bit is set􏶹
􏶴
    return (􏵶number􏵷 >> 􏵶index􏵷) & 1;
􏶳

􏷘+􏷗􏷒bit of byte is set􏷑
􏷐checks whether a bit is set􏷏
􏶠if the index is out of range, no value will be set􏶡
􏶜􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the byte to set (indexing starts at zero)􏶿
􏶚m􏶛􏶾BOOL􏶽􏶼bit is set􏶻􏶺whether the bit is set􏶹
􏶴
    return (􏵶byte􏵷 >> 􏵶index􏵷) & 1;
􏶳

􏷘+􏷗􏷒apply bool to bit􏷑
􏷐sets the nth bit of a number based on a boolean value􏷏
􏶠a TRUE bool sets a bit to 1.  a FALSE bool, sets a bit to 0􏶡
􏶜mr􏶝􏷆int􏷅􏷄number􏷃􏷀the number that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the number to set (indexing starts at zero)􏶿
􏶜􏶝􏷆BOOL􏷅􏷄bool value􏷃􏷀the boolean value to apply to the bit􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(int) * CHAR_BIT){
        *􏵶number􏵷 ^= (-􏵶bool value􏵷 ^ *􏵶number􏵷) & (1 << 􏵶index􏵷);
    }
􏶳

􏷘+􏷗􏷒apply bool to bit of byte􏷑
􏷐sets the nth bit of a number based on a boolean value􏷏
􏶠a TRUE bool sets a bit to 1.  a FALSE bool, sets a bit to 0􏶡
􏶜mr􏶝􏷆BYTE􏷅􏷄byte􏷃􏷀the byte that the bit manipulation will occur on􏶿
􏶜􏶝􏷆unsigned int􏷅􏷄index􏷃􏷀the bit index of the byte to set (indexing starts at zero)􏶿
􏶜􏶝􏷆BOOL􏷅􏷄bool value􏷃􏷀the boolean value to apply to the bit􏶿
􏶴
    􏶲NOTE: would prefer a static assertion as sizeof is a compile-time operator􏶱
    if (􏵶index􏵷 < sizeof(BYTE) * CHAR_BIT){
        *􏵶byte􏵷 ^= (-􏵶bool value􏵷 ^ *􏵶byte􏵷) & (1 << 􏵶index􏵷);
    }
􏶳

􏷘+􏷗􏷒convert bool array to int􏷑
􏷐converts n number of bools to the integer value it represents􏷏
􏶠example: TRUE,FALSE would equal 2􏶡
􏶜􏶝􏷆BOOL[]􏷅􏷄bool array􏷃􏷀an array of n bools􏶿
􏶜􏶝􏷆size_t􏷅􏷄bool array size􏷃􏷀the size of the bool array􏶿
􏶚m􏶛􏶾int􏶽􏶼integer representation􏶻􏶺the integer representation of the bools􏶹
􏶴
    size_t uIndex = 0u;
    int nResult = 0;
    for (; uIndex < 􏵶bool array size􏵷; ++uIndex){
        􏵲apply bool to bit􏵳&nResult,􏵶bool array size􏵷-1-uIndex,􏵶bool array􏵷[uIndex]);
    }
    
    return nResult;
􏶳
