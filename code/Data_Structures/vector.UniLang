􏶞object􏶟
􏷲A basic generic vector type for adding and accessing a dynamic number of elements.􏷱
􏷰The capacity of the vector is equal to its size.
Be sure to type cast the void* returned when accessing.
This is a typical practice of void pointers.􏷯
􏷮Vector􏷭 􏷮Data Structure􏷭
􏷬Trevor Hickey􏷫

􏷦stddef􏷥􏷢HASA: size_t􏷡
􏷤stdio􏷣􏷢USES: malloc(), realloc(), free(), sizeof()􏷡
􏷦stdioLib􏷥􏷢USES: BOOL􏷡

􏷘+􏷗􏷒􏶐􏷑
􏷐Initialize the 􏶐􏷏
􏶠􏶐 will be set to an empty state with a size of 0􏶡
􏶜c􏶝􏷆size_t􏷅􏷄type size􏷃􏷀the size of the types that will be held in the homogeneous container.􏶿
􏶜c􏶝􏷆size_t􏷅􏷄initial capacity􏷃􏷀pre allocate a certain number of elements upon initialization.􏶿
􏶴
􏶲start as an empty vector􏶱
􏵴size􏵵 = 0;

􏶲store the size of each element.  (Such a byte count will  become underivable through void*)􏶱
􏵴type size􏵵 = 􏵶type size􏵷;

􏶲start with a capacity of 1 for the initial allocation􏶱
􏶲1 is arbitary.  It assumes that someone will at least add 1 element and allocates that memory upfront.􏶱
􏵴capacity􏵵 = 􏵶initial capacity􏵷;

􏶲initialze the internal dynamic array.􏶱
􏶲this array starts with an initial capacity, and will grow as more elements are added􏶱
􏵴elements􏵵 = malloc(sizeof(void *) * 􏵴capacity􏵵);
􏶳

􏷘+􏷗􏷒add􏷑
􏷐Adds an element to the end of the 􏶐􏷏
􏶠Potentially increases the capacity if more room is needed.  Increases the size.
The added item will be the last item.􏶡
􏶜c􏶝􏷆void*􏷅􏷄new element􏷃􏷀the new capacity to resize the internal array to.􏶿
􏶴

    􏶲increase the size of the internal array if we are already full􏶱
    if (􏵴size􏵵 == 􏵴capacity􏵵){
        
        􏶲allocate space for one more item􏶱
        􏵲resize􏵳􏵴capacity􏵵 + 1);
    }
    
    􏶲there should be enough room to add the new element now􏶱
    memset(􏵴elements􏵵[􏵴size􏵵],􏵶new element􏵷,􏵴type size􏵵);
    
    􏶲increase our size now that the insertion is complete.􏶱
    ++􏵴size􏵵;
􏶳
􏷘+􏷗􏷒get􏷑
􏷐Get an element at a particular index􏷏
􏶠If an invalid index is given, NULL is returned􏶡
􏶜c􏶝􏷆size_t􏷅􏷄index􏷃􏷀the index of the item to get􏶿
􏶚􏶛􏶾void*􏶽􏶼selected element􏶻􏶺the selected element of the 􏶐 from the given index􏶹
􏶴

􏶲if the index is valid, return it.􏶱
if (􏵲valid index􏵳􏵶index􏵷)){
    return 􏵴elements􏵵[􏵶index􏵷];
}

􏶲if the index is NOT valid, return NULL.􏶱
return NULL;
􏶳

􏷘-􏷗􏷒resize􏷑
􏷐Resize the internal array.􏷏
􏶠This is done when new space is needed for a newly inserted element.􏶡
􏶜c􏶝􏷆size_t􏷅􏷄new capacity􏷃􏷀the new capacity to resize the internal array to.􏶿
􏶴
    􏶲Change the size of the internal array (most likely increasing it).􏶱
    void** NewElements = realloc(􏵴elements􏵵, sizeof(void *) * 􏵶new capacity􏵷);
    
    􏶲Ensure the allocation was succesful before applying it.􏶱
    if (NewElements){
        􏵴elements􏵵 = NewElements;
        􏵴capacity􏵵 = 􏵶new capacity􏵷;
    }
􏶳

􏷘-􏷗􏷒valid index􏷑
􏷐Check if an integer is a valid index􏷏
􏶠True is returned if the index is an addressable element in the vector.
False is returned if it is an out of range index􏶡
􏶜c􏶝􏷆size_t􏷅􏷄index􏷃􏷀the index to test for validity of􏶿
􏶚c􏶛􏶾BOOL􏶽􏶼is valid index􏶻􏶺whether the index is valid for the current state of the 􏶐􏶹
􏶴
    􏶲Ensure the index is in range􏶱
    return 􏵶index􏵷 >= 0 && 􏵶index􏵷 < 􏵴size􏵵;
􏶳

􏷘+􏷗􏷒~􏶐􏷑
􏷐Destruct the 􏶐􏷏
􏶠This function must be called to free the internal allocated memory before 􏶐 goes out of scope.􏶡
􏶴
    􏶲clear all of the dynamic memory from the internal array􏶱
    􏶲after this call, 􏶐 can safely fall out of scope.􏶱
    free(􏵴elements􏵵);
􏶳

􏶨the number of elements currently in the 􏶐􏶧
􏶦This can be used for iteration of the elements.
There is no hard limit on the size.  The internal array will grow to accommodate for new inserted elements.􏶥
􏶌observe􏶑􏶘-􏶙􏶮size_t􏶭􏶬size􏶫􏶪0􏶩

􏶨the amount of space allocated for the interal array􏶧
􏶦different implementations do different initial capacity, and have the capacity grow at different rates.
We will increase the capacity by one every time we need to add a new element to a full array.􏶥
􏶌observe􏶑􏶘-􏶙􏶮size_t􏶭􏶬capacity􏶫􏶪1􏶩

􏶨the internal array for all of our generic elements􏶧
􏶦when accessing an element, you will need to type cast to the appropiate pointer type before dereferencing􏶥
􏶘-􏶙􏶮void**􏶭􏶬elements􏶫􏶪0􏶩

􏶨the size of each element in the homogeneous container.􏶧
􏶦this is important to know, as acquiring a value upon insertion is done through void pointers as a means of generality.􏶥
􏶘-􏶙􏶮size_t􏶭􏶬type size􏶫􏶪0􏶩